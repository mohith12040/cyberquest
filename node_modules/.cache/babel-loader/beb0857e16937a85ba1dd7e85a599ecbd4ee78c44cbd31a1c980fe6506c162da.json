{"ast":null,"code":"import _defineProperty from \"/Users/mohithneravati/Cyber quest/cyberquest/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/Users/mohithneravati/Cyber quest/cyberquest/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _Class3;\n/**\n * marked v16.0.0 - a markdown parser\n * Copyright (c) 2011-2025, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\nfunction M() {\n  return {\n    async: !1,\n    breaks: !1,\n    extensions: null,\n    gfm: !0,\n    hooks: null,\n    pedantic: !1,\n    renderer: null,\n    silent: !1,\n    tokenizer: null,\n    walkTokens: null\n  };\n}\nvar w = M();\nfunction H(a) {\n  w = a;\n}\nvar C = {\n  exec: () => null\n};\nfunction h(a) {\n  let e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  let t = typeof a == \"string\" ? a : a.source,\n    n = {\n      replace: (s, i) => {\n        let r = typeof i == \"string\" ? i : i.source;\n        return r = r.replace(m.caret, \"$1\"), t = t.replace(s, r), n;\n      },\n      getRegex: () => new RegExp(t, e)\n    };\n  return n;\n}\nvar m = {\n    codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n    outputLinkReplace: /\\\\([\\[\\]])/g,\n    indentCodeCompensation: /^(\\s+)(?:```)/,\n    beginningSpace: /^\\s+/,\n    endingHash: /#$/,\n    startingSpaceChar: /^ /,\n    endingSpaceChar: / $/,\n    nonSpaceChar: /[^ ]/,\n    newLineCharGlobal: /\\n/g,\n    tabCharGlobal: /\\t/g,\n    multipleSpaceGlobal: /\\s+/g,\n    blankLine: /^[ \\t]*$/,\n    doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n    blockquoteStart: /^ {0,3}>/,\n    blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n    blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n    listReplaceTabs: /^\\t+/,\n    listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n    listIsTask: /^\\[[ xX]\\] /,\n    listReplaceTask: /^\\[[ xX]\\] +/,\n    anyLine: /\\n.*\\n/,\n    hrefBrackets: /^<(.*)>$/,\n    tableDelimiter: /[:|]/,\n    tableAlignChars: /^\\||\\| *$/g,\n    tableRowBlankLine: /\\n[ \\t]*$/,\n    tableAlignRight: /^ *-+: *$/,\n    tableAlignCenter: /^ *:-+: *$/,\n    tableAlignLeft: /^ *:-+ *$/,\n    startATag: /^<a /i,\n    endATag: /^<\\/a>/i,\n    startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n    endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n    startAngleBracket: /^</,\n    endAngleBracket: />$/,\n    pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n    unicodeAlphaNumeric: /(?:[0-9A-Za-z\\xAA\\xB2\\xB3\\xB5\\xB9\\xBA\\xBC-\\xBE\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u0660-\\u0669\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07C0-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u0870-\\u0887\\u0889-\\u088E\\u08A0-\\u08C9\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0966-\\u096F\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09E6-\\u09F1\\u09F4-\\u09F9\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A6F\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AE6-\\u0AEF\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B66-\\u0B6F\\u0B71-\\u0B77\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0BE6-\\u0BF2\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C5D\\u0C60\\u0C61\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDD\\u0CDE\\u0CE0\\u0CE1\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D58-\\u0D61\\u0D66-\\u0D78\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DE6-\\u0DEF\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F20-\\u0F33\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F-\\u1049\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u1090-\\u1099\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1369-\\u137C\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u1711\\u171F-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4C\\u1B50-\\u1B59\\u1B83-\\u1BA0\\u1BAE-\\u1BE5\\u1C00-\\u1C23\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C8A\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2070\\u2071\\u2074-\\u2079\\u207F-\\u2089\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2150-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2C00-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2CFD\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u3192-\\u3195\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\u3400-\\u4DBF\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7CD\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7DC\\uA7F2-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA830-\\uA835\\uA840-\\uA873\\uA882-\\uA8B3\\uA8D0-\\uA8D9\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA900-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF-\\uA9D9\\uA9E0-\\uA9E4\\uA9E6-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD07-\\uDD33\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE1-\\uDEFB\\uDF00-\\uDF23\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDD70-\\uDD7A\\uDD7C-\\uDD8A\\uDD8C-\\uDD92\\uDD94\\uDD95\\uDD97-\\uDDA1\\uDDA3-\\uDDB1\\uDDB3-\\uDDB9\\uDDBB\\uDDBC\\uDDC0-\\uDDF3\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67\\uDF80-\\uDF85\\uDF87-\\uDFB0\\uDFB2-\\uDFBA]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC58-\\uDC76\\uDC79-\\uDC9E\\uDCA7-\\uDCAF\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDCFB-\\uDD1B\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBC-\\uDDCF\\uDDD2-\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE40-\\uDE48\\uDE60-\\uDE7E\\uDE80-\\uDE9F\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDEEB-\\uDEEF\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF58-\\uDF72\\uDF78-\\uDF91\\uDFA9-\\uDFAF]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDCFA-\\uDD23\\uDD30-\\uDD39\\uDD40-\\uDD65\\uDD6F-\\uDD85\\uDE60-\\uDE7E\\uDE80-\\uDEA9\\uDEB0\\uDEB1\\uDEC2-\\uDEC4\\uDF00-\\uDF27\\uDF30-\\uDF45\\uDF51-\\uDF54\\uDF70-\\uDF81\\uDFB0-\\uDFCB\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC52-\\uDC6F\\uDC71\\uDC72\\uDC75\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD03-\\uDD26\\uDD36-\\uDD3F\\uDD44\\uDD47\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDD0-\\uDDDA\\uDDDC\\uDDE1-\\uDDF4\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE3F\\uDE40\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDEF0-\\uDEF9\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61\\uDF80-\\uDF89\\uDF8B\\uDF8E\\uDF90-\\uDFB5\\uDFB7\\uDFD1\\uDFD3]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC50-\\uDC59\\uDC5F-\\uDC61\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEAA\\uDEB8\\uDEC0-\\uDEC9\\uDED0-\\uDEE3\\uDF00-\\uDF1A\\uDF30-\\uDF3B\\uDF40-\\uDF46]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCF2\\uDCFF-\\uDD06\\uDD09\\uDD0C-\\uDD13\\uDD15\\uDD16\\uDD18-\\uDD2F\\uDD3F\\uDD41\\uDD50-\\uDD59\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEB0-\\uDEF8\\uDFC0-\\uDFE0\\uDFF0-\\uDFF9]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC50-\\uDC6C\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD50-\\uDD59\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDDA0-\\uDDA9\\uDEE0-\\uDEF2\\uDF02\\uDF04-\\uDF10\\uDF12-\\uDF33\\uDF50-\\uDF59\\uDFB0\\uDFC0-\\uDFD4]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|\\uD80B[\\uDF90-\\uDFF0]|[\\uD80C\\uD80E\\uD80F\\uD81C-\\uD820\\uD822\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883\\uD885-\\uD887][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2F\\uDC41-\\uDC46\\uDC60-\\uDFFF]|\\uD810[\\uDC00-\\uDFFA]|\\uD811[\\uDC00-\\uDE46]|\\uD818[\\uDD00-\\uDD1D\\uDD30-\\uDD39]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDE70-\\uDEBE\\uDEC0-\\uDEC9\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF5B-\\uDF61\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDD40-\\uDD6C\\uDD70-\\uDD79\\uDE40-\\uDE96\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD823[\\uDC00-\\uDCD5\\uDCFF-\\uDD08]|\\uD82B[\\uDFF0-\\uDFF3\\uDFF5-\\uDFFB\\uDFFD\\uDFFE]|\\uD82C[\\uDC00-\\uDD22\\uDD32\\uDD50-\\uDD52\\uDD55\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD833[\\uDCF0-\\uDCF9]|\\uD834[\\uDEC0-\\uDED3\\uDEE0-\\uDEF3\\uDF60-\\uDF78]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD837[\\uDF00-\\uDF1E\\uDF25-\\uDF2A]|\\uD838[\\uDC30-\\uDC6D\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD40-\\uDD49\\uDD4E\\uDE90-\\uDEAD\\uDEC0-\\uDEEB\\uDEF0-\\uDEF9]|\\uD839[\\uDCD0-\\uDCEB\\uDCF0-\\uDCF9\\uDDD0-\\uDDED\\uDDF0-\\uDDFA\\uDFE0-\\uDFE6\\uDFE8-\\uDFEB\\uDFED\\uDFEE\\uDFF0-\\uDFFE]|\\uD83A[\\uDC00-\\uDCC4\\uDCC7-\\uDCCF\\uDD00-\\uDD43\\uDD4B\\uDD50-\\uDD59]|\\uD83B[\\uDC71-\\uDCAB\\uDCAD-\\uDCAF\\uDCB1-\\uDCB4\\uDD01-\\uDD2D\\uDD2F-\\uDD3D\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD83C[\\uDD00-\\uDD0C]|\\uD83E[\\uDFF0-\\uDFF9]|\\uD869[\\uDC00-\\uDEDF\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF39\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0\\uDFF0-\\uDFFF]|\\uD87B[\\uDC00-\\uDE5D]|\\uD87E[\\uDC00-\\uDE1D]|\\uD884[\\uDC00-\\uDF4A\\uDF50-\\uDFFF]|\\uD888[\\uDC00-\\uDFAF])/,\n    escapeTest: /[&<>\"']/,\n    escapeReplace: /[&<>\"']/g,\n    escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n    escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n    unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n    caret: /(^|[^\\[])\\^/g,\n    percentDecode: /%25/g,\n    findPipe: /\\|/g,\n    splitPipe: / \\|/,\n    slashPipe: /\\\\\\|/g,\n    carriageReturn: /\\r\\n|\\r/g,\n    spaceLine: /^ +$/gm,\n    notSpaceStart: /^\\S*/,\n    endingNewline: /\\n$/,\n    listItemRegex: a => new RegExp(\"^( {0,3}\".concat(a, \")((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))\")),\n    nextBulletRegex: a => new RegExp(\"^ {0,\".concat(Math.min(3, a - 1), \"}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))\")),\n    hrRegex: a => new RegExp(\"^ {0,\".concat(Math.min(3, a - 1), \"}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)\")),\n    fencesBeginRegex: a => new RegExp(\"^ {0,\".concat(Math.min(3, a - 1), \"}(?:```|~~~)\")),\n    headingBeginRegex: a => new RegExp(\"^ {0,\".concat(Math.min(3, a - 1), \"}#\")),\n    htmlBeginRegex: a => new RegExp(\"^ {0,\".concat(Math.min(3, a - 1), \"}<(?:[a-z].*>|!--)\"), \"i\")\n  },\n  xe = /^(?:[ \\t]*(?:\\n|$))+/,\n  be = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/,\n  Te = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  I = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  we = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  j = /(?:[*+-]|\\d{1,9}[.)])/,\n  re = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  ie = h(re).replace(/bull/g, j).replace(/blockCode/g, /(?: {4}| {0,3}\\t)/).replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g, / {0,3}>/).replace(/heading/g, / {0,3}#{1,6}/).replace(/html/g, / {0,3}<[^\\n>]+>\\n/).replace(/\\|table/g, \"\").getRegex(),\n  ye = h(re).replace(/bull/g, j).replace(/blockCode/g, /(?: {4}| {0,3}\\t)/).replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g, / {0,3}>/).replace(/heading/g, / {0,3}#{1,6}/).replace(/html/g, / {0,3}<[^\\n>]+>\\n/).replace(/table/g, / {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/).getRegex(),\n  F = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  Re = /^[^\\n]+/,\n  Q = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/,\n  Se = h(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/).replace(\"label\", Q).replace(\"title\", /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/).getRegex(),\n  $e = h(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/).replace(/bull/g, j).getRegex(),\n  v = \"address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul\",\n  U = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/,\n  _e = h(\"^ {0,3}(?:<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)|comment[^\\\\n]*(\\\\n+|$)|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \t]*)+\\\\n|$)|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \t]*)+\\\\n|$)|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \t]*)+\\\\n|$))\", \"i\").replace(\"comment\", U).replace(\"tag\", v).replace(\"attribute\", / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex(),\n  oe = h(F).replace(\"hr\", I).replace(\"heading\", \" {0,3}#{1,6}(?:\\\\s|$)\").replace(\"|lheading\", \"\").replace(\"|table\", \"\").replace(\"blockquote\", \" {0,3}>\").replace(\"fences\", \" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\", \" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\", \"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\", v).getRegex(),\n  Le = h(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/).replace(\"paragraph\", oe).getRegex(),\n  K = {\n    blockquote: Le,\n    code: be,\n    def: Se,\n    fences: Te,\n    heading: we,\n    hr: I,\n    html: _e,\n    lheading: ie,\n    list: $e,\n    newline: xe,\n    paragraph: oe,\n    table: C,\n    text: Re\n  },\n  se = h(\"^ *([^\\\\n ].*)\\\\n {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)\").replace(\"hr\", I).replace(\"heading\", \" {0,3}#{1,6}(?:\\\\s|$)\").replace(\"blockquote\", \" {0,3}>\").replace(\"code\", \"(?: {4}| {0,3}\t)[^\\\\n]\").replace(\"fences\", \" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\", \" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\", \"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\", v).getRegex(),\n  ze = _objectSpread(_objectSpread({}, K), {}, {\n    lheading: ye,\n    table: se,\n    paragraph: h(F).replace(\"hr\", I).replace(\"heading\", \" {0,3}#{1,6}(?:\\\\s|$)\").replace(\"|lheading\", \"\").replace(\"table\", se).replace(\"blockquote\", \" {0,3}>\").replace(\"fences\", \" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\", \" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\", \"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\", v).getRegex()\n  }),\n  Me = _objectSpread(_objectSpread({}, K), {}, {\n    html: h(\"^ *(?:comment *(?:\\\\n|\\\\s*$)|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)|<tag(?:\\\"[^\\\"]*\\\"|'[^']*'|\\\\s[^'\\\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))\").replace(\"comment\", U).replace(/tag/g, \"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b\").getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: C,\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: h(F).replace(\"hr\", I).replace(\"heading\", \" *#{1,6} *[^\\n]\").replace(\"lheading\", ie).replace(\"|table\", \"\").replace(\"blockquote\", \" {0,3}>\").replace(\"|fences\", \"\").replace(\"|list\", \"\").replace(\"|html\", \"\").replace(\"|tag\", \"\").getRegex()\n  }),\n  Pe = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  Ae = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  le = /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  Ee = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  D = /(?:[!-\\/:-@\\[-`\\{-~\\xA1-\\xA9\\xAB\\xAC\\xAE-\\xB1\\xB4\\xB6-\\xB8\\xBB\\xBF\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u037E\\u0384\\u0385\\u0387\\u03F6\\u0482\\u055A-\\u055F\\u0589\\u058A\\u058D-\\u058F\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0606-\\u060F\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u06DE\\u06E9\\u06FD\\u06FE\\u0700-\\u070D\\u07F6-\\u07F9\\u07FE\\u07FF\\u0830-\\u083E\\u085E\\u0888\\u0964\\u0965\\u0970\\u09F2\\u09F3\\u09FA\\u09FB\\u09FD\\u0A76\\u0AF0\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C77\\u0C7F\\u0C84\\u0D4F\\u0D79\\u0DF4\\u0E3F\\u0E4F\\u0E5A\\u0E5B\\u0F01-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0F3A-\\u0F3D\\u0F85\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE-\\u0FDA\\u104A-\\u104F\\u109E\\u109F\\u10FB\\u1360-\\u1368\\u1390-\\u1399\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DB\\u1800-\\u180A\\u1940\\u1944\\u1945\\u19DE-\\u19FF\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B4E\\u1B4F\\u1B5A-\\u1B6A\\u1B74-\\u1B7F\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2010-\\u2027\\u2030-\\u205E\\u207A-\\u207E\\u208A-\\u208E\\u20A0-\\u20C0\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2429\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2775\\u2794-\\u2B73\\u2B76-\\u2B95\\u2B97-\\u2BFF\\u2CE5-\\u2CEA\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E5D\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFF\\u3001-\\u3004\\u3008-\\u3020\\u3030\\u3036\\u3037\\u303D-\\u303F\\u309B\\u309C\\u30A0\\u30FB\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E5\\u31EF\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAA77-\\uAA79\\uAADE\\uAADF\\uAAF0\\uAAF1\\uAB5B\\uAB6A\\uAB6B\\uABEB\\uFB29\\uFBB2-\\uFBC2\\uFD3E-\\uFD4F\\uFDCF\\uFDFC-\\uFDFF\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE66\\uFE68-\\uFE6B\\uFF01-\\uFF0F\\uFF1A-\\uFF20\\uFF3B-\\uFF40\\uFF5B-\\uFF65\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD]|\\uD800[\\uDD00-\\uDD02\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9C\\uDDA0\\uDDD0-\\uDDFC\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDC77\\uDC78\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEC8\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDD6E\\uDD8E\\uDD8F\\uDEAD\\uDF55-\\uDF59\\uDF86-\\uDF89]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9\\uDFD4\\uDFD5\\uDFD7\\uDFD8]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDEB9\\uDF3C-\\uDF3F]|\\uD806[\\uDC3B\\uDD44-\\uDD46\\uDDE2\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2\\uDF00-\\uDF09\\uDFE1]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8\\uDF43-\\uDF4F\\uDFD5-\\uDFF1\\uDFFF]|\\uD809[\\uDC70-\\uDC74]|\\uD80B[\\uDFF1\\uDFF2]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3F\\uDF44\\uDF45]|\\uD81B[\\uDD6D-\\uDD6F\\uDE97-\\uDE9A\\uDFE2]|\\uD82F[\\uDC9C\\uDC9F]|\\uD833[\\uDC00-\\uDCEF\\uDD00-\\uDEB3\\uDF50-\\uDFC3]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDEA\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85-\\uDE8B]|\\uD838[\\uDD4F\\uDEFF]|\\uD839\\uDDFF|\\uD83A[\\uDD5E\\uDD5F]|\\uD83B[\\uDCAC\\uDCB0\\uDD2E\\uDEF0\\uDEF1]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD0D-\\uDDAD\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDE60-\\uDE65\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED7\\uDEDC-\\uDEEC\\uDEF0-\\uDEFC\\uDF00-\\uDF76\\uDF7B-\\uDFD9\\uDFE0-\\uDFEB\\uDFF0]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDCB0-\\uDCBB\\uDCC0\\uDCC1\\uDD00-\\uDE53\\uDE60-\\uDE6D\\uDE70-\\uDE7C\\uDE80-\\uDE89\\uDE8F-\\uDEC6\\uDECE-\\uDEDC\\uDEDF-\\uDEE9\\uDEF0-\\uDEF8\\uDF00-\\uDF92\\uDF94-\\uDFEF])/,\n  X = /(?:[\\t-\\r -\\/:-@\\[-`\\{-~\\xA0-\\xA9\\xAB\\xAC\\xAE-\\xB1\\xB4\\xB6-\\xB8\\xBB\\xBF\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u037E\\u0384\\u0385\\u0387\\u03F6\\u0482\\u055A-\\u055F\\u0589\\u058A\\u058D-\\u058F\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0606-\\u060F\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u06DE\\u06E9\\u06FD\\u06FE\\u0700-\\u070D\\u07F6-\\u07F9\\u07FE\\u07FF\\u0830-\\u083E\\u085E\\u0888\\u0964\\u0965\\u0970\\u09F2\\u09F3\\u09FA\\u09FB\\u09FD\\u0A76\\u0AF0\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C77\\u0C7F\\u0C84\\u0D4F\\u0D79\\u0DF4\\u0E3F\\u0E4F\\u0E5A\\u0E5B\\u0F01-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0F3A-\\u0F3D\\u0F85\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE-\\u0FDA\\u104A-\\u104F\\u109E\\u109F\\u10FB\\u1360-\\u1368\\u1390-\\u1399\\u1400\\u166D\\u166E\\u1680\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DB\\u1800-\\u180A\\u1940\\u1944\\u1945\\u19DE-\\u19FF\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B4E\\u1B4F\\u1B5A-\\u1B6A\\u1B74-\\u1B7F\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2000-\\u200A\\u2010-\\u2029\\u202F-\\u205F\\u207A-\\u207E\\u208A-\\u208E\\u20A0-\\u20C0\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2429\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2775\\u2794-\\u2B73\\u2B76-\\u2B95\\u2B97-\\u2BFF\\u2CE5-\\u2CEA\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E5D\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u3004\\u3008-\\u3020\\u3030\\u3036\\u3037\\u303D-\\u303F\\u309B\\u309C\\u30A0\\u30FB\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E5\\u31EF\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAA77-\\uAA79\\uAADE\\uAADF\\uAAF0\\uAAF1\\uAB5B\\uAB6A\\uAB6B\\uABEB\\uFB29\\uFBB2-\\uFBC2\\uFD3E-\\uFD4F\\uFDCF\\uFDFC-\\uFDFF\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE66\\uFE68-\\uFE6B\\uFEFF\\uFF01-\\uFF0F\\uFF1A-\\uFF20\\uFF3B-\\uFF40\\uFF5B-\\uFF65\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD]|\\uD800[\\uDD00-\\uDD02\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9C\\uDDA0\\uDDD0-\\uDDFC\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDC77\\uDC78\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEC8\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDD6E\\uDD8E\\uDD8F\\uDEAD\\uDF55-\\uDF59\\uDF86-\\uDF89]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9\\uDFD4\\uDFD5\\uDFD7\\uDFD8]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDEB9\\uDF3C-\\uDF3F]|\\uD806[\\uDC3B\\uDD44-\\uDD46\\uDDE2\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2\\uDF00-\\uDF09\\uDFE1]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8\\uDF43-\\uDF4F\\uDFD5-\\uDFF1\\uDFFF]|\\uD809[\\uDC70-\\uDC74]|\\uD80B[\\uDFF1\\uDFF2]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3F\\uDF44\\uDF45]|\\uD81B[\\uDD6D-\\uDD6F\\uDE97-\\uDE9A\\uDFE2]|\\uD82F[\\uDC9C\\uDC9F]|\\uD833[\\uDC00-\\uDCEF\\uDD00-\\uDEB3\\uDF50-\\uDFC3]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDEA\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85-\\uDE8B]|\\uD838[\\uDD4F\\uDEFF]|\\uD839\\uDDFF|\\uD83A[\\uDD5E\\uDD5F]|\\uD83B[\\uDCAC\\uDCB0\\uDD2E\\uDEF0\\uDEF1]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD0D-\\uDDAD\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDE60-\\uDE65\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED7\\uDEDC-\\uDEEC\\uDEF0-\\uDEFC\\uDF00-\\uDF76\\uDF7B-\\uDFD9\\uDFE0-\\uDFEB\\uDFF0]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDCB0-\\uDCBB\\uDCC0\\uDCC1\\uDD00-\\uDE53\\uDE60-\\uDE6D\\uDE70-\\uDE7C\\uDE80-\\uDE89\\uDE8F-\\uDEC6\\uDECE-\\uDEDC\\uDEDF-\\uDEE9\\uDEF0-\\uDEF8\\uDF00-\\uDF92\\uDF94-\\uDFEF])/,\n  ae = /(?:[\\0-\\x08\\x0E-\\x1F0-9A-Za-z\\x7F-\\x9F\\xAA\\xAD\\xB2\\xB3\\xB5\\xB9\\xBA\\xBC-\\xBE\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376-\\u037D\\u037F-\\u0383\\u0386\\u0388-\\u03F5\\u03F7-\\u0481\\u0483-\\u0559\\u0560-\\u0588\\u058B\\u058C\\u0590-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7-\\u05F2\\u05F5-\\u0605\\u0610-\\u061A\\u061C\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DD\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u070E-\\u07F5\\u07FA-\\u07FD\\u0800-\\u082F\\u083F-\\u085D\\u085F-\\u0887\\u0889-\\u0963\\u0966-\\u096F\\u0971-\\u09F1\\u09F4-\\u09F9\\u09FC\\u09FE-\\u0A75\\u0A77-\\u0AEF\\u0AF2-\\u0B6F\\u0B71-\\u0BF2\\u0BFB-\\u0C76\\u0C78-\\u0C7E\\u0C80-\\u0C83\\u0C85-\\u0D4E\\u0D50-\\u0D78\\u0D7A-\\u0DF3\\u0DF5-\\u0E3E\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E5C-\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F33\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F84\\u0F86-\\u0FBD\\u0FC6\\u0FCD\\u0FDB-\\u1049\\u1050-\\u109D\\u10A0-\\u10FA\\u10FC-\\u135F\\u1369-\\u138F\\u139A-\\u13FF\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u169D-\\u16EA\\u16EE-\\u1734\\u1737-\\u17D3\\u17D7\\u17DC-\\u17FF\\u180B-\\u193F\\u1941-\\u1943\\u1946-\\u19DD\\u1A00-\\u1A1D\\u1A20-\\u1A9F\\u1AA7\\u1AAE-\\u1B4D\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BFB\\u1C00-\\u1C3A\\u1C40-\\u1C7D\\u1C80-\\u1CBF\\u1CC8-\\u1CD2\\u1CD4-\\u1FBC\\u1FBE\\u1FC2-\\u1FCC\\u1FD0-\\u1FDC\\u1FE0-\\u1FEC\\u1FF0-\\u1FFC\\u1FFF\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2079\\u207F-\\u2089\\u208F-\\u209F\\u20C1-\\u20FF\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2150-\\u2189\\u218C-\\u218F\\u242A-\\u243F\\u244B-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2B74\\u2B75\\u2B96\\u2C00-\\u2CE4\\u2CEB-\\u2CF8\\u2CFD\\u2D00-\\u2D6F\\u2D71-\\u2DFF\\u2E2F\\u2E5E-\\u2E7F\\u2E9A\\u2EF4-\\u2EFF\\u2FD6-\\u2FEF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3040-\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u318F\\u3192-\\u3195\\u31A0-\\u31BF\\u31E6-\\u31EE\\u31F0-\\u31FF\\u321F-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\u3400-\\u4DBF\\u4E00-\\uA48F\\uA4C7-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA672\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA6F8-\\uA6FF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA827\\uA82C-\\uA835\\uA83A-\\uA873\\uA878-\\uA8CD\\uA8D0-\\uA8F7\\uA8FB\\uA8FD-\\uA92D\\uA930-\\uA95E\\uA960-\\uA9C0\\uA9CE-\\uA9DD\\uA9E0-\\uAA5B\\uAA60-\\uAA76\\uAA7A-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAB5A\\uAB5C-\\uAB69\\uAB6C-\\uABEA\\uABEC-\\uD7FF\\uE000-\\uFB28\\uFB2A-\\uFBB1\\uFBC3-\\uFD3D\\uFD50-\\uFDCE\\uFDD0-\\uFDFB\\uFE00-\\uFE0F\\uFE1A-\\uFE2F\\uFE53\\uFE67\\uFE6C-\\uFEFE\\uFF00\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFDF\\uFFE7\\uFFEF-\\uFFFB\\uFFFE\\uFFFF]|\\uD800[\\uDC00-\\uDCFF\\uDD03-\\uDD36\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDD8F\\uDD9D-\\uDD9F\\uDDA1-\\uDDCF\\uDDFD-\\uDF9E\\uDFA0-\\uDFCF\\uDFD1-\\uDFFF]|\\uD801[\\uDC00-\\uDD6E\\uDD70-\\uDFFF]|\\uD802[\\uDC00-\\uDC56\\uDC58-\\uDC76\\uDC79-\\uDD1E\\uDD20-\\uDD3E\\uDD40-\\uDE4F\\uDE59-\\uDE7E\\uDE80-\\uDEC7\\uDEC9-\\uDEEF\\uDEF7-\\uDF38\\uDF40-\\uDF98\\uDF9D-\\uDFFF]|\\uD803[\\uDC00-\\uDD6D\\uDD6F-\\uDD8D\\uDD90-\\uDEAC\\uDEAE-\\uDF54\\uDF5A-\\uDF85\\uDF8A-\\uDFFF]|\\uD804[\\uDC00-\\uDC46\\uDC4E-\\uDCBA\\uDCBD\\uDCC2-\\uDD3F\\uDD44-\\uDD73\\uDD76-\\uDDC4\\uDDC9-\\uDDCC\\uDDCE-\\uDDDA\\uDDDC\\uDDE0-\\uDE37\\uDE3E-\\uDEA8\\uDEAA-\\uDFD3\\uDFD6\\uDFD9-\\uDFFF]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC5C\\uDC5E-\\uDCC5\\uDCC7-\\uDDC0\\uDDD8-\\uDE40\\uDE44-\\uDE5F\\uDE6D-\\uDEB8\\uDEBA-\\uDF3B\\uDF40-\\uDFFF]|\\uD806[\\uDC00-\\uDC3A\\uDC3C-\\uDD43\\uDD47-\\uDDE1\\uDDE3-\\uDE3E\\uDE47-\\uDE99\\uDE9D\\uDEA3-\\uDEFF\\uDF0A-\\uDFE0\\uDFE2-\\uDFFF]|\\uD807[\\uDC00-\\uDC40\\uDC46-\\uDC6F\\uDC72-\\uDEF6\\uDEF9-\\uDF42\\uDF50-\\uDFD4\\uDFF2-\\uDFFE]|[\\uD808\\uD80A\\uD80C-\\uD819\\uD81C-\\uD82E\\uD830-\\uD832\\uD837\\uD83F-\\uDBFF][\\uDC00-\\uDFFF]|\\uD809[\\uDC00-\\uDC6F\\uDC75-\\uDFFF]|\\uD80B[\\uDC00-\\uDFF0\\uDFF3-\\uDFFF]|\\uD81A[\\uDC00-\\uDE6D\\uDE70-\\uDEF4\\uDEF6-\\uDF36\\uDF40-\\uDF43\\uDF46-\\uDFFF]|\\uD81B[\\uDC00-\\uDD6C\\uDD70-\\uDE96\\uDE9B-\\uDFE1\\uDFE3-\\uDFFF]|\\uD82F[\\uDC00-\\uDC9B\\uDC9D\\uDC9E\\uDCA0-\\uDFFF]|\\uD833[\\uDCF0-\\uDCFF\\uDEB4-\\uDF4F\\uDFC4-\\uDFFF]|\\uD834[\\uDCF6-\\uDCFF\\uDD27\\uDD28\\uDD65-\\uDD69\\uDD6D-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDDEB-\\uDDFF\\uDE42-\\uDE44\\uDE46-\\uDEFF\\uDF57-\\uDFFF]|\\uD835[\\uDC00-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE8C-\\uDFFF]|\\uD838[\\uDC00-\\uDD4E\\uDD50-\\uDEFE\\uDF00-\\uDFFF]|\\uD839[\\uDC00-\\uDDFE\\uDE00-\\uDFFF]|\\uD83A[\\uDC00-\\uDD5D\\uDD60-\\uDFFF]|\\uD83B[\\uDC00-\\uDCAB\\uDCAD-\\uDCAF\\uDCB1-\\uDD2D\\uDD2F-\\uDEEF\\uDEF2-\\uDFFF]|\\uD83C[\\uDC2C-\\uDC2F\\uDC94-\\uDC9F\\uDCAF\\uDCB0\\uDCC0\\uDCD0\\uDCF6-\\uDD0C\\uDDAE-\\uDDE5\\uDE03-\\uDE0F\\uDE3C-\\uDE3F\\uDE49-\\uDE4F\\uDE52-\\uDE5F\\uDE66-\\uDEFF]|\\uD83D[\\uDED8-\\uDEDB\\uDEED-\\uDEEF\\uDEFD-\\uDEFF\\uDF77-\\uDF7A\\uDFDA-\\uDFDF\\uDFEC-\\uDFEF\\uDFF1-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE\\uDCAF\\uDCBC-\\uDCBF\\uDCC2-\\uDCFF\\uDE54-\\uDE5F\\uDE6E\\uDE6F\\uDE7D-\\uDE7F\\uDE8A-\\uDE8E\\uDEC7-\\uDECD\\uDEDD\\uDEDE\\uDEEA-\\uDEEF\\uDEF9-\\uDEFF\\uDF93\\uDFF0-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/,\n  Ce = h(/^((?![*_])punctSpace)/, \"u\").replace(/punctSpace/g, X).getRegex(),\n  ce = /(?!~)(?:[!-\\/:-@\\[-`\\{-~\\xA1-\\xA9\\xAB\\xAC\\xAE-\\xB1\\xB4\\xB6-\\xB8\\xBB\\xBF\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u037E\\u0384\\u0385\\u0387\\u03F6\\u0482\\u055A-\\u055F\\u0589\\u058A\\u058D-\\u058F\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0606-\\u060F\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u06DE\\u06E9\\u06FD\\u06FE\\u0700-\\u070D\\u07F6-\\u07F9\\u07FE\\u07FF\\u0830-\\u083E\\u085E\\u0888\\u0964\\u0965\\u0970\\u09F2\\u09F3\\u09FA\\u09FB\\u09FD\\u0A76\\u0AF0\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C77\\u0C7F\\u0C84\\u0D4F\\u0D79\\u0DF4\\u0E3F\\u0E4F\\u0E5A\\u0E5B\\u0F01-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0F3A-\\u0F3D\\u0F85\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE-\\u0FDA\\u104A-\\u104F\\u109E\\u109F\\u10FB\\u1360-\\u1368\\u1390-\\u1399\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DB\\u1800-\\u180A\\u1940\\u1944\\u1945\\u19DE-\\u19FF\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B4E\\u1B4F\\u1B5A-\\u1B6A\\u1B74-\\u1B7F\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2010-\\u2027\\u2030-\\u205E\\u207A-\\u207E\\u208A-\\u208E\\u20A0-\\u20C0\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2429\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2775\\u2794-\\u2B73\\u2B76-\\u2B95\\u2B97-\\u2BFF\\u2CE5-\\u2CEA\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E5D\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFF\\u3001-\\u3004\\u3008-\\u3020\\u3030\\u3036\\u3037\\u303D-\\u303F\\u309B\\u309C\\u30A0\\u30FB\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E5\\u31EF\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAA77-\\uAA79\\uAADE\\uAADF\\uAAF0\\uAAF1\\uAB5B\\uAB6A\\uAB6B\\uABEB\\uFB29\\uFBB2-\\uFBC2\\uFD3E-\\uFD4F\\uFDCF\\uFDFC-\\uFDFF\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE66\\uFE68-\\uFE6B\\uFF01-\\uFF0F\\uFF1A-\\uFF20\\uFF3B-\\uFF40\\uFF5B-\\uFF65\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD]|\\uD800[\\uDD00-\\uDD02\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9C\\uDDA0\\uDDD0-\\uDDFC\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDC77\\uDC78\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEC8\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDD6E\\uDD8E\\uDD8F\\uDEAD\\uDF55-\\uDF59\\uDF86-\\uDF89]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9\\uDFD4\\uDFD5\\uDFD7\\uDFD8]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDEB9\\uDF3C-\\uDF3F]|\\uD806[\\uDC3B\\uDD44-\\uDD46\\uDDE2\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2\\uDF00-\\uDF09\\uDFE1]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8\\uDF43-\\uDF4F\\uDFD5-\\uDFF1\\uDFFF]|\\uD809[\\uDC70-\\uDC74]|\\uD80B[\\uDFF1\\uDFF2]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3F\\uDF44\\uDF45]|\\uD81B[\\uDD6D-\\uDD6F\\uDE97-\\uDE9A\\uDFE2]|\\uD82F[\\uDC9C\\uDC9F]|\\uD833[\\uDC00-\\uDCEF\\uDD00-\\uDEB3\\uDF50-\\uDFC3]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDEA\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85-\\uDE8B]|\\uD838[\\uDD4F\\uDEFF]|\\uD839\\uDDFF|\\uD83A[\\uDD5E\\uDD5F]|\\uD83B[\\uDCAC\\uDCB0\\uDD2E\\uDEF0\\uDEF1]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD0D-\\uDDAD\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDE60-\\uDE65\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED7\\uDEDC-\\uDEEC\\uDEF0-\\uDEFC\\uDF00-\\uDF76\\uDF7B-\\uDFD9\\uDFE0-\\uDFEB\\uDFF0]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDCB0-\\uDCBB\\uDCC0\\uDCC1\\uDD00-\\uDE53\\uDE60-\\uDE6D\\uDE70-\\uDE7C\\uDE80-\\uDE89\\uDE8F-\\uDEC6\\uDECE-\\uDEDC\\uDEDF-\\uDEE9\\uDEF0-\\uDEF8\\uDF00-\\uDF92\\uDF94-\\uDFEF])/,\n  Ie = /(?!~)(?:[\\t-\\r -\\/:-@\\[-`\\{-~\\xA0-\\xA9\\xAB\\xAC\\xAE-\\xB1\\xB4\\xB6-\\xB8\\xBB\\xBF\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u037E\\u0384\\u0385\\u0387\\u03F6\\u0482\\u055A-\\u055F\\u0589\\u058A\\u058D-\\u058F\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0606-\\u060F\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u06DE\\u06E9\\u06FD\\u06FE\\u0700-\\u070D\\u07F6-\\u07F9\\u07FE\\u07FF\\u0830-\\u083E\\u085E\\u0888\\u0964\\u0965\\u0970\\u09F2\\u09F3\\u09FA\\u09FB\\u09FD\\u0A76\\u0AF0\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C77\\u0C7F\\u0C84\\u0D4F\\u0D79\\u0DF4\\u0E3F\\u0E4F\\u0E5A\\u0E5B\\u0F01-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0F3A-\\u0F3D\\u0F85\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE-\\u0FDA\\u104A-\\u104F\\u109E\\u109F\\u10FB\\u1360-\\u1368\\u1390-\\u1399\\u1400\\u166D\\u166E\\u1680\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DB\\u1800-\\u180A\\u1940\\u1944\\u1945\\u19DE-\\u19FF\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B4E\\u1B4F\\u1B5A-\\u1B6A\\u1B74-\\u1B7F\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2000-\\u200A\\u2010-\\u2029\\u202F-\\u205F\\u207A-\\u207E\\u208A-\\u208E\\u20A0-\\u20C0\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2429\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2775\\u2794-\\u2B73\\u2B76-\\u2B95\\u2B97-\\u2BFF\\u2CE5-\\u2CEA\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E5D\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u3004\\u3008-\\u3020\\u3030\\u3036\\u3037\\u303D-\\u303F\\u309B\\u309C\\u30A0\\u30FB\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E5\\u31EF\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAA77-\\uAA79\\uAADE\\uAADF\\uAAF0\\uAAF1\\uAB5B\\uAB6A\\uAB6B\\uABEB\\uFB29\\uFBB2-\\uFBC2\\uFD3E-\\uFD4F\\uFDCF\\uFDFC-\\uFDFF\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE66\\uFE68-\\uFE6B\\uFEFF\\uFF01-\\uFF0F\\uFF1A-\\uFF20\\uFF3B-\\uFF40\\uFF5B-\\uFF65\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD]|\\uD800[\\uDD00-\\uDD02\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9C\\uDDA0\\uDDD0-\\uDDFC\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDC77\\uDC78\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEC8\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDD6E\\uDD8E\\uDD8F\\uDEAD\\uDF55-\\uDF59\\uDF86-\\uDF89]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9\\uDFD4\\uDFD5\\uDFD7\\uDFD8]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDEB9\\uDF3C-\\uDF3F]|\\uD806[\\uDC3B\\uDD44-\\uDD46\\uDDE2\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2\\uDF00-\\uDF09\\uDFE1]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8\\uDF43-\\uDF4F\\uDFD5-\\uDFF1\\uDFFF]|\\uD809[\\uDC70-\\uDC74]|\\uD80B[\\uDFF1\\uDFF2]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3F\\uDF44\\uDF45]|\\uD81B[\\uDD6D-\\uDD6F\\uDE97-\\uDE9A\\uDFE2]|\\uD82F[\\uDC9C\\uDC9F]|\\uD833[\\uDC00-\\uDCEF\\uDD00-\\uDEB3\\uDF50-\\uDFC3]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDEA\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85-\\uDE8B]|\\uD838[\\uDD4F\\uDEFF]|\\uD839\\uDDFF|\\uD83A[\\uDD5E\\uDD5F]|\\uD83B[\\uDCAC\\uDCB0\\uDD2E\\uDEF0\\uDEF1]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD0D-\\uDDAD\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDE60-\\uDE65\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED7\\uDEDC-\\uDEEC\\uDEF0-\\uDEFC\\uDF00-\\uDF76\\uDF7B-\\uDFD9\\uDFE0-\\uDFEB\\uDFF0]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDCB0-\\uDCBB\\uDCC0\\uDCC1\\uDD00-\\uDE53\\uDE60-\\uDE6D\\uDE70-\\uDE7C\\uDE80-\\uDE89\\uDE8F-\\uDEC6\\uDECE-\\uDEDC\\uDEDF-\\uDEE9\\uDEF0-\\uDEF8\\uDF00-\\uDF92\\uDF94-\\uDFEF])/,\n  Oe = /(?:(?:[\\0-\\x08\\x0E-\\x1F0-9A-Za-z\\x7F-\\x9F\\xAA\\xAD\\xB2\\xB3\\xB5\\xB9\\xBA\\xBC-\\xBE\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376-\\u037D\\u037F-\\u0383\\u0386\\u0388-\\u03F5\\u03F7-\\u0481\\u0483-\\u0559\\u0560-\\u0588\\u058B\\u058C\\u0590-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7-\\u05F2\\u05F5-\\u0605\\u0610-\\u061A\\u061C\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DD\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u070E-\\u07F5\\u07FA-\\u07FD\\u0800-\\u082F\\u083F-\\u085D\\u085F-\\u0887\\u0889-\\u0963\\u0966-\\u096F\\u0971-\\u09F1\\u09F4-\\u09F9\\u09FC\\u09FE-\\u0A75\\u0A77-\\u0AEF\\u0AF2-\\u0B6F\\u0B71-\\u0BF2\\u0BFB-\\u0C76\\u0C78-\\u0C7E\\u0C80-\\u0C83\\u0C85-\\u0D4E\\u0D50-\\u0D78\\u0D7A-\\u0DF3\\u0DF5-\\u0E3E\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E5C-\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F33\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F84\\u0F86-\\u0FBD\\u0FC6\\u0FCD\\u0FDB-\\u1049\\u1050-\\u109D\\u10A0-\\u10FA\\u10FC-\\u135F\\u1369-\\u138F\\u139A-\\u13FF\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u169D-\\u16EA\\u16EE-\\u1734\\u1737-\\u17D3\\u17D7\\u17DC-\\u17FF\\u180B-\\u193F\\u1941-\\u1943\\u1946-\\u19DD\\u1A00-\\u1A1D\\u1A20-\\u1A9F\\u1AA7\\u1AAE-\\u1B4D\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BFB\\u1C00-\\u1C3A\\u1C40-\\u1C7D\\u1C80-\\u1CBF\\u1CC8-\\u1CD2\\u1CD4-\\u1FBC\\u1FBE\\u1FC2-\\u1FCC\\u1FD0-\\u1FDC\\u1FE0-\\u1FEC\\u1FF0-\\u1FFC\\u1FFF\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2079\\u207F-\\u2089\\u208F-\\u209F\\u20C1-\\u20FF\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2150-\\u2189\\u218C-\\u218F\\u242A-\\u243F\\u244B-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2B74\\u2B75\\u2B96\\u2C00-\\u2CE4\\u2CEB-\\u2CF8\\u2CFD\\u2D00-\\u2D6F\\u2D71-\\u2DFF\\u2E2F\\u2E5E-\\u2E7F\\u2E9A\\u2EF4-\\u2EFF\\u2FD6-\\u2FEF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3040-\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u318F\\u3192-\\u3195\\u31A0-\\u31BF\\u31E6-\\u31EE\\u31F0-\\u31FF\\u321F-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\u3400-\\u4DBF\\u4E00-\\uA48F\\uA4C7-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA672\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA6F8-\\uA6FF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA827\\uA82C-\\uA835\\uA83A-\\uA873\\uA878-\\uA8CD\\uA8D0-\\uA8F7\\uA8FB\\uA8FD-\\uA92D\\uA930-\\uA95E\\uA960-\\uA9C0\\uA9CE-\\uA9DD\\uA9E0-\\uAA5B\\uAA60-\\uAA76\\uAA7A-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAB5A\\uAB5C-\\uAB69\\uAB6C-\\uABEA\\uABEC-\\uD7FF\\uE000-\\uFB28\\uFB2A-\\uFBB1\\uFBC3-\\uFD3D\\uFD50-\\uFDCE\\uFDD0-\\uFDFB\\uFE00-\\uFE0F\\uFE1A-\\uFE2F\\uFE53\\uFE67\\uFE6C-\\uFEFE\\uFF00\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFDF\\uFFE7\\uFFEF-\\uFFFB\\uFFFE\\uFFFF]|\\uD800[\\uDC00-\\uDCFF\\uDD03-\\uDD36\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDD8F\\uDD9D-\\uDD9F\\uDDA1-\\uDDCF\\uDDFD-\\uDF9E\\uDFA0-\\uDFCF\\uDFD1-\\uDFFF]|\\uD801[\\uDC00-\\uDD6E\\uDD70-\\uDFFF]|\\uD802[\\uDC00-\\uDC56\\uDC58-\\uDC76\\uDC79-\\uDD1E\\uDD20-\\uDD3E\\uDD40-\\uDE4F\\uDE59-\\uDE7E\\uDE80-\\uDEC7\\uDEC9-\\uDEEF\\uDEF7-\\uDF38\\uDF40-\\uDF98\\uDF9D-\\uDFFF]|\\uD803[\\uDC00-\\uDD6D\\uDD6F-\\uDD8D\\uDD90-\\uDEAC\\uDEAE-\\uDF54\\uDF5A-\\uDF85\\uDF8A-\\uDFFF]|\\uD804[\\uDC00-\\uDC46\\uDC4E-\\uDCBA\\uDCBD\\uDCC2-\\uDD3F\\uDD44-\\uDD73\\uDD76-\\uDDC4\\uDDC9-\\uDDCC\\uDDCE-\\uDDDA\\uDDDC\\uDDE0-\\uDE37\\uDE3E-\\uDEA8\\uDEAA-\\uDFD3\\uDFD6\\uDFD9-\\uDFFF]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC5C\\uDC5E-\\uDCC5\\uDCC7-\\uDDC0\\uDDD8-\\uDE40\\uDE44-\\uDE5F\\uDE6D-\\uDEB8\\uDEBA-\\uDF3B\\uDF40-\\uDFFF]|\\uD806[\\uDC00-\\uDC3A\\uDC3C-\\uDD43\\uDD47-\\uDDE1\\uDDE3-\\uDE3E\\uDE47-\\uDE99\\uDE9D\\uDEA3-\\uDEFF\\uDF0A-\\uDFE0\\uDFE2-\\uDFFF]|\\uD807[\\uDC00-\\uDC40\\uDC46-\\uDC6F\\uDC72-\\uDEF6\\uDEF9-\\uDF42\\uDF50-\\uDFD4\\uDFF2-\\uDFFE]|[\\uD808\\uD80A\\uD80C-\\uD819\\uD81C-\\uD82E\\uD830-\\uD832\\uD837\\uD83F-\\uDBFF][\\uDC00-\\uDFFF]|\\uD809[\\uDC00-\\uDC6F\\uDC75-\\uDFFF]|\\uD80B[\\uDC00-\\uDFF0\\uDFF3-\\uDFFF]|\\uD81A[\\uDC00-\\uDE6D\\uDE70-\\uDEF4\\uDEF6-\\uDF36\\uDF40-\\uDF43\\uDF46-\\uDFFF]|\\uD81B[\\uDC00-\\uDD6C\\uDD70-\\uDE96\\uDE9B-\\uDFE1\\uDFE3-\\uDFFF]|\\uD82F[\\uDC00-\\uDC9B\\uDC9D\\uDC9E\\uDCA0-\\uDFFF]|\\uD833[\\uDCF0-\\uDCFF\\uDEB4-\\uDF4F\\uDFC4-\\uDFFF]|\\uD834[\\uDCF6-\\uDCFF\\uDD27\\uDD28\\uDD65-\\uDD69\\uDD6D-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDDEB-\\uDDFF\\uDE42-\\uDE44\\uDE46-\\uDEFF\\uDF57-\\uDFFF]|\\uD835[\\uDC00-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE8C-\\uDFFF]|\\uD838[\\uDC00-\\uDD4E\\uDD50-\\uDEFE\\uDF00-\\uDFFF]|\\uD839[\\uDC00-\\uDDFE\\uDE00-\\uDFFF]|\\uD83A[\\uDC00-\\uDD5D\\uDD60-\\uDFFF]|\\uD83B[\\uDC00-\\uDCAB\\uDCAD-\\uDCAF\\uDCB1-\\uDD2D\\uDD2F-\\uDEEF\\uDEF2-\\uDFFF]|\\uD83C[\\uDC2C-\\uDC2F\\uDC94-\\uDC9F\\uDCAF\\uDCB0\\uDCC0\\uDCD0\\uDCF6-\\uDD0C\\uDDAE-\\uDDE5\\uDE03-\\uDE0F\\uDE3C-\\uDE3F\\uDE49-\\uDE4F\\uDE52-\\uDE5F\\uDE66-\\uDEFF]|\\uD83D[\\uDED8-\\uDEDB\\uDEED-\\uDEEF\\uDEFD-\\uDEFF\\uDF77-\\uDF7A\\uDFDA-\\uDFDF\\uDFEC-\\uDFEF\\uDFF1-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE\\uDCAF\\uDCBC-\\uDCBF\\uDCC2-\\uDCFF\\uDE54-\\uDE5F\\uDE6E\\uDE6F\\uDE7D-\\uDE7F\\uDE8A-\\uDE8E\\uDEC7-\\uDECD\\uDEDD\\uDEDE\\uDEEA-\\uDEEF\\uDEF9-\\uDEFF\\uDF93\\uDFF0-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])|~)/,\n  Be = /\\[[^[\\]]*?\\]\\((?:\\\\.|[^\\\\\\(\\)]|\\((?:\\\\.|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<[^<>]*?>/g,\n  pe = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/,\n  qe = h(pe, \"u\").replace(/punct/g, D).getRegex(),\n  ve = h(pe, \"u\").replace(/punct/g, ce).getRegex(),\n  ue = \"^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)|notPunctSpace(\\\\*+)(?=notPunctSpace)\",\n  De = h(ue, \"gu\").replace(/notPunctSpace/g, ae).replace(/punctSpace/g, X).replace(/punct/g, D).getRegex(),\n  Ze = h(ue, \"gu\").replace(/notPunctSpace/g, Oe).replace(/punctSpace/g, Ie).replace(/punct/g, ce).getRegex(),\n  Ge = h(\"^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)|[^_]+(?=[^_])|(?!_)punct(_+)(?=[\\\\s]|$)|notPunctSpace(_+)(?!_)(?=punctSpace|$)|(?!_)punctSpace(_+)(?=notPunctSpace)|[\\\\s](_+)(?!_)(?=punct)|(?!_)punct(_+)(?!_)(?=punct)\", \"gu\").replace(/notPunctSpace/g, ae).replace(/punctSpace/g, X).replace(/punct/g, D).getRegex(),\n  He = h(/\\\\(punct)/, \"gu\").replace(/punct/g, D).getRegex(),\n  Ne = h(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/).replace(\"scheme\", /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/).replace(\"email\", /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/).getRegex(),\n  je = h(U).replace(\"(?:-->|$)\", \"-->\").getRegex(),\n  Fe = h(\"^comment|^</[a-zA-Z][\\\\w:-]*\\\\s*>|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>|^<\\\\?[\\\\s\\\\S]*?\\\\?>|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\").replace(\"comment\", je).replace(\"attribute\", /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/).getRegex(),\n  q = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/,\n  Qe = h(/^!?\\[(label)\\]\\(\\s*(href)(?:(?:[ \\t]*(?:\\n[ \\t]*)?)(title))?\\s*\\)/).replace(\"label\", q).replace(\"href\", /<(?:\\\\.|[^\\n<>\\\\])+>|[^ \\t\\n\\x00-\\x1f]*/).replace(\"title\", /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/).getRegex(),\n  he = h(/^!?\\[(label)\\]\\[(ref)\\]/).replace(\"label\", q).replace(\"ref\", Q).getRegex(),\n  ke = h(/^!?\\[(ref)\\](?:\\[\\])?/).replace(\"ref\", Q).getRegex(),\n  Ue = h(\"reflink|nolink(?!\\\\()\", \"g\").replace(\"reflink\", he).replace(\"nolink\", ke).getRegex(),\n  W = {\n    _backpedal: C,\n    anyPunctuation: He,\n    autolink: Ne,\n    blockSkip: Be,\n    br: le,\n    code: Ae,\n    del: C,\n    emStrongLDelim: qe,\n    emStrongRDelimAst: De,\n    emStrongRDelimUnd: Ge,\n    escape: Pe,\n    link: Qe,\n    nolink: ke,\n    punctuation: Ce,\n    reflink: he,\n    reflinkSearch: Ue,\n    tag: Fe,\n    text: Ee,\n    url: C\n  },\n  Ke = _objectSpread(_objectSpread({}, W), {}, {\n    link: h(/^!?\\[(label)\\]\\((.*?)\\)/).replace(\"label\", q).getRegex(),\n    reflink: h(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace(\"label\", q).getRegex()\n  }),\n  N = _objectSpread(_objectSpread({}, W), {}, {\n    emStrongRDelimAst: Ze,\n    emStrongLDelim: ve,\n    url: h(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, \"i\").replace(\"email\", /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/).getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])((?:\\\\.|[^\\\\])*?(?:\\\\.|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n  }),\n  Xe = _objectSpread(_objectSpread({}, N), {}, {\n    br: h(le).replace(\"{2,}\", \"*\").getRegex(),\n    text: h(N.text).replace(\"\\\\b_\", \"\\\\b_| {2,}\\\\n\").replace(/\\{2,\\}/g, \"*\").getRegex()\n  }),\n  O = {\n    normal: K,\n    gfm: ze,\n    pedantic: Me\n  },\n  P = {\n    normal: W,\n    gfm: N,\n    breaks: Xe,\n    pedantic: Ke\n  };\nvar We = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': \"&quot;\",\n    \"'\": \"&#39;\"\n  },\n  ge = a => We[a];\nfunction R(a, e) {\n  if (e) {\n    if (m.escapeTest.test(a)) return a.replace(m.escapeReplace, ge);\n  } else if (m.escapeTestNoEncode.test(a)) return a.replace(m.escapeReplaceNoEncode, ge);\n  return a;\n}\nfunction J(a) {\n  try {\n    a = encodeURI(a).replace(m.percentDecode, \"%\");\n  } catch (_unused) {\n    return null;\n  }\n  return a;\n}\nfunction V(a, e) {\n  var _n$at;\n  let t = a.replace(m.findPipe, (i, r, o) => {\n      let l = !1,\n        c = r;\n      for (; --c >= 0 && o[c] === \"\\\\\";) l = !l;\n      return l ? \"|\" : \" |\";\n    }),\n    n = t.split(m.splitPipe),\n    s = 0;\n  if (n[0].trim() || n.shift(), n.length > 0 && !((_n$at = n.at(-1)) !== null && _n$at !== void 0 && _n$at.trim()) && n.pop(), e) if (n.length > e) n.splice(e);else for (; n.length < e;) n.push(\"\");\n  for (; s < n.length; s++) n[s] = n[s].trim().replace(m.slashPipe, \"|\");\n  return n;\n}\nfunction A(a, e, t) {\n  let n = a.length;\n  if (n === 0) return \"\";\n  let s = 0;\n  for (; s < n;) {\n    let i = a.charAt(n - s - 1);\n    if (i === e && !t) s++;else if (i !== e && t) s++;else break;\n  }\n  return a.slice(0, n - s);\n}\nfunction fe(a, e) {\n  if (a.indexOf(e[1]) === -1) return -1;\n  let t = 0;\n  for (let n = 0; n < a.length; n++) if (a[n] === \"\\\\\") n++;else if (a[n] === e[0]) t++;else if (a[n] === e[1] && (t--, t < 0)) return n;\n  return t > 0 ? -2 : -1;\n}\nfunction de(a, e, t, n, s) {\n  let i = e.href,\n    r = e.title || null,\n    o = a[1].replace(s.other.outputLinkReplace, \"$1\");\n  n.state.inLink = !0;\n  let l = {\n    type: a[0].charAt(0) === \"!\" ? \"image\" : \"link\",\n    raw: t,\n    href: i,\n    title: r,\n    text: o,\n    tokens: n.inlineTokens(o)\n  };\n  return n.state.inLink = !1, l;\n}\nfunction Je(a, e, t) {\n  let n = a.match(t.other.indentCodeCompensation);\n  if (n === null) return e;\n  let s = n[1];\n  return e.split(\"\\n\").map(i => {\n    let r = i.match(t.other.beginningSpace);\n    if (r === null) return i;\n    let [o] = r;\n    return o.length >= s.length ? i.slice(s.length) : i;\n  }).join(\"\\n\");\n}\nvar S = class S {\n  constructor(e) {\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"rules\", void 0);\n    _defineProperty(this, \"lexer\", void 0);\n    this.options = e || w;\n  }\n  space(e) {\n    let t = this.rules.block.newline.exec(e);\n    if (t && t[0].length > 0) return {\n      type: \"space\",\n      raw: t[0]\n    };\n  }\n  code(e) {\n    let t = this.rules.block.code.exec(e);\n    if (t) {\n      let n = t[0].replace(this.rules.other.codeRemoveIndent, \"\");\n      return {\n        type: \"code\",\n        raw: t[0],\n        codeBlockStyle: \"indented\",\n        text: this.options.pedantic ? n : A(n, \"\\n\")\n      };\n    }\n  }\n  fences(e) {\n    let t = this.rules.block.fences.exec(e);\n    if (t) {\n      let n = t[0],\n        s = Je(n, t[3] || \"\", this.rules);\n      return {\n        type: \"code\",\n        raw: n,\n        lang: t[2] ? t[2].trim().replace(this.rules.inline.anyPunctuation, \"$1\") : t[2],\n        text: s\n      };\n    }\n  }\n  heading(e) {\n    let t = this.rules.block.heading.exec(e);\n    if (t) {\n      let n = t[2].trim();\n      if (this.rules.other.endingHash.test(n)) {\n        let s = A(n, \"#\");\n        (this.options.pedantic || !s || this.rules.other.endingSpaceChar.test(s)) && (n = s.trim());\n      }\n      return {\n        type: \"heading\",\n        raw: t[0],\n        depth: t[1].length,\n        text: n,\n        tokens: this.lexer.inline(n)\n      };\n    }\n  }\n  hr(e) {\n    let t = this.rules.block.hr.exec(e);\n    if (t) return {\n      type: \"hr\",\n      raw: A(t[0], \"\\n\")\n    };\n  }\n  blockquote(e) {\n    let t = this.rules.block.blockquote.exec(e);\n    if (t) {\n      let n = A(t[0], \"\\n\").split(\"\\n\"),\n        s = \"\",\n        i = \"\",\n        r = [];\n      for (; n.length > 0;) {\n        let o = !1,\n          l = [],\n          c;\n        for (c = 0; c < n.length; c++) if (this.rules.other.blockquoteStart.test(n[c])) l.push(n[c]), o = !0;else if (!o) l.push(n[c]);else break;\n        n = n.slice(c);\n        let p = l.join(\"\\n\"),\n          u = p.replace(this.rules.other.blockquoteSetextReplace, \"\\n    $1\").replace(this.rules.other.blockquoteSetextReplace2, \"\");\n        s = s ? \"\".concat(s, \"\\n\").concat(p) : p, i = i ? \"\".concat(i, \"\\n\").concat(u) : u;\n        let d = this.lexer.state.top;\n        if (this.lexer.state.top = !0, this.lexer.blockTokens(u, r, !0), this.lexer.state.top = d, n.length === 0) break;\n        let g = r.at(-1);\n        if ((g === null || g === void 0 ? void 0 : g.type) === \"code\") break;\n        if ((g === null || g === void 0 ? void 0 : g.type) === \"blockquote\") {\n          let x = g,\n            f = x.raw + \"\\n\" + n.join(\"\\n\"),\n            y = this.blockquote(f);\n          r[r.length - 1] = y, s = s.substring(0, s.length - x.raw.length) + y.raw, i = i.substring(0, i.length - x.text.length) + y.text;\n          break;\n        } else if ((g === null || g === void 0 ? void 0 : g.type) === \"list\") {\n          let x = g,\n            f = x.raw + \"\\n\" + n.join(\"\\n\"),\n            y = this.list(f);\n          r[r.length - 1] = y, s = s.substring(0, s.length - g.raw.length) + y.raw, i = i.substring(0, i.length - x.raw.length) + y.raw, n = f.substring(r.at(-1).raw.length).split(\"\\n\");\n          continue;\n        }\n      }\n      return {\n        type: \"blockquote\",\n        raw: s,\n        tokens: r,\n        text: i\n      };\n    }\n  }\n  list(e) {\n    let t = this.rules.block.list.exec(e);\n    if (t) {\n      let n = t[1].trim(),\n        s = n.length > 1,\n        i = {\n          type: \"list\",\n          raw: \"\",\n          ordered: s,\n          start: s ? +n.slice(0, -1) : \"\",\n          loose: !1,\n          items: []\n        };\n      n = s ? \"\\\\d{1,9}\\\\\".concat(n.slice(-1)) : \"\\\\\".concat(n), this.options.pedantic && (n = s ? n : \"[*+-]\");\n      let r = this.rules.other.listItemRegex(n),\n        o = !1;\n      for (; e;) {\n        let c = !1,\n          p = \"\",\n          u = \"\";\n        if (!(t = r.exec(e)) || this.rules.block.hr.test(e)) break;\n        p = t[0], e = e.substring(p.length);\n        let d = t[2].split(\"\\n\", 1)[0].replace(this.rules.other.listReplaceTabs, Z => \" \".repeat(3 * Z.length)),\n          g = e.split(\"\\n\", 1)[0],\n          x = !d.trim(),\n          f = 0;\n        if (this.options.pedantic ? (f = 2, u = d.trimStart()) : x ? f = t[1].length + 1 : (f = t[2].search(this.rules.other.nonSpaceChar), f = f > 4 ? 1 : f, u = d.slice(f), f += t[1].length), x && this.rules.other.blankLine.test(g) && (p += g + \"\\n\", e = e.substring(g.length + 1), c = !0), !c) {\n          let Z = this.rules.other.nextBulletRegex(f),\n            ee = this.rules.other.hrRegex(f),\n            te = this.rules.other.fencesBeginRegex(f),\n            ne = this.rules.other.headingBeginRegex(f),\n            me = this.rules.other.htmlBeginRegex(f);\n          for (; e;) {\n            let G = e.split(\"\\n\", 1)[0],\n              E;\n            if (g = G, this.options.pedantic ? (g = g.replace(this.rules.other.listReplaceNesting, \"  \"), E = g) : E = g.replace(this.rules.other.tabCharGlobal, \"    \"), te.test(g) || ne.test(g) || me.test(g) || Z.test(g) || ee.test(g)) break;\n            if (E.search(this.rules.other.nonSpaceChar) >= f || !g.trim()) u += \"\\n\" + E.slice(f);else {\n              if (x || d.replace(this.rules.other.tabCharGlobal, \"    \").search(this.rules.other.nonSpaceChar) >= 4 || te.test(d) || ne.test(d) || ee.test(d)) break;\n              u += \"\\n\" + g;\n            }\n            !x && !g.trim() && (x = !0), p += G + \"\\n\", e = e.substring(G.length + 1), d = E.slice(f);\n          }\n        }\n        i.loose || (o ? i.loose = !0 : this.rules.other.doubleBlankLine.test(p) && (o = !0));\n        let y = null,\n          Y;\n        this.options.gfm && (y = this.rules.other.listIsTask.exec(u), y && (Y = y[0] !== \"[ ] \", u = u.replace(this.rules.other.listReplaceTask, \"\"))), i.items.push({\n          type: \"list_item\",\n          raw: p,\n          task: !!y,\n          checked: Y,\n          loose: !1,\n          text: u,\n          tokens: []\n        }), i.raw += p;\n      }\n      let l = i.items.at(-1);\n      if (l) l.raw = l.raw.trimEnd(), l.text = l.text.trimEnd();else return;\n      i.raw = i.raw.trimEnd();\n      for (let c = 0; c < i.items.length; c++) if (this.lexer.state.top = !1, i.items[c].tokens = this.lexer.blockTokens(i.items[c].text, []), !i.loose) {\n        let p = i.items[c].tokens.filter(d => d.type === \"space\"),\n          u = p.length > 0 && p.some(d => this.rules.other.anyLine.test(d.raw));\n        i.loose = u;\n      }\n      if (i.loose) for (let c = 0; c < i.items.length; c++) i.items[c].loose = !0;\n      return i;\n    }\n  }\n  html(e) {\n    let t = this.rules.block.html.exec(e);\n    if (t) return {\n      type: \"html\",\n      block: !0,\n      raw: t[0],\n      pre: t[1] === \"pre\" || t[1] === \"script\" || t[1] === \"style\",\n      text: t[0]\n    };\n  }\n  def(e) {\n    let t = this.rules.block.def.exec(e);\n    if (t) {\n      let n = t[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, \" \"),\n        s = t[2] ? t[2].replace(this.rules.other.hrefBrackets, \"$1\").replace(this.rules.inline.anyPunctuation, \"$1\") : \"\",\n        i = t[3] ? t[3].substring(1, t[3].length - 1).replace(this.rules.inline.anyPunctuation, \"$1\") : t[3];\n      return {\n        type: \"def\",\n        tag: n,\n        raw: t[0],\n        href: s,\n        title: i\n      };\n    }\n  }\n  table(e) {\n    var _t$;\n    let t = this.rules.block.table.exec(e);\n    if (!t || !this.rules.other.tableDelimiter.test(t[2])) return;\n    let n = V(t[1]),\n      s = t[2].replace(this.rules.other.tableAlignChars, \"\").split(\"|\"),\n      i = (_t$ = t[3]) !== null && _t$ !== void 0 && _t$.trim() ? t[3].replace(this.rules.other.tableRowBlankLine, \"\").split(\"\\n\") : [],\n      r = {\n        type: \"table\",\n        raw: t[0],\n        header: [],\n        align: [],\n        rows: []\n      };\n    if (n.length === s.length) {\n      for (let o of s) this.rules.other.tableAlignRight.test(o) ? r.align.push(\"right\") : this.rules.other.tableAlignCenter.test(o) ? r.align.push(\"center\") : this.rules.other.tableAlignLeft.test(o) ? r.align.push(\"left\") : r.align.push(null);\n      for (let o = 0; o < n.length; o++) r.header.push({\n        text: n[o],\n        tokens: this.lexer.inline(n[o]),\n        header: !0,\n        align: r.align[o]\n      });\n      for (let o of i) r.rows.push(V(o, r.header.length).map((l, c) => ({\n        text: l,\n        tokens: this.lexer.inline(l),\n        header: !1,\n        align: r.align[c]\n      })));\n      return r;\n    }\n  }\n  lheading(e) {\n    let t = this.rules.block.lheading.exec(e);\n    if (t) return {\n      type: \"heading\",\n      raw: t[0],\n      depth: t[2].charAt(0) === \"=\" ? 1 : 2,\n      text: t[1],\n      tokens: this.lexer.inline(t[1])\n    };\n  }\n  paragraph(e) {\n    let t = this.rules.block.paragraph.exec(e);\n    if (t) {\n      let n = t[1].charAt(t[1].length - 1) === \"\\n\" ? t[1].slice(0, -1) : t[1];\n      return {\n        type: \"paragraph\",\n        raw: t[0],\n        text: n,\n        tokens: this.lexer.inline(n)\n      };\n    }\n  }\n  text(e) {\n    let t = this.rules.block.text.exec(e);\n    if (t) return {\n      type: \"text\",\n      raw: t[0],\n      text: t[0],\n      tokens: this.lexer.inline(t[0])\n    };\n  }\n  escape(e) {\n    let t = this.rules.inline.escape.exec(e);\n    if (t) return {\n      type: \"escape\",\n      raw: t[0],\n      text: t[1]\n    };\n  }\n  tag(e) {\n    let t = this.rules.inline.tag.exec(e);\n    if (t) return !this.lexer.state.inLink && this.rules.other.startATag.test(t[0]) ? this.lexer.state.inLink = !0 : this.lexer.state.inLink && this.rules.other.endATag.test(t[0]) && (this.lexer.state.inLink = !1), !this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(t[0]) ? this.lexer.state.inRawBlock = !0 : this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(t[0]) && (this.lexer.state.inRawBlock = !1), {\n      type: \"html\",\n      raw: t[0],\n      inLink: this.lexer.state.inLink,\n      inRawBlock: this.lexer.state.inRawBlock,\n      block: !1,\n      text: t[0]\n    };\n  }\n  link(e) {\n    let t = this.rules.inline.link.exec(e);\n    if (t) {\n      let n = t[2].trim();\n      if (!this.options.pedantic && this.rules.other.startAngleBracket.test(n)) {\n        if (!this.rules.other.endAngleBracket.test(n)) return;\n        let r = A(n.slice(0, -1), \"\\\\\");\n        if ((n.length - r.length) % 2 === 0) return;\n      } else {\n        let r = fe(t[2], \"()\");\n        if (r === -2) return;\n        if (r > -1) {\n          let l = (t[0].indexOf(\"!\") === 0 ? 5 : 4) + t[1].length + r;\n          t[2] = t[2].substring(0, r), t[0] = t[0].substring(0, l).trim(), t[3] = \"\";\n        }\n      }\n      let s = t[2],\n        i = \"\";\n      if (this.options.pedantic) {\n        let r = this.rules.other.pedanticHrefTitle.exec(s);\n        r && (s = r[1], i = r[3]);\n      } else i = t[3] ? t[3].slice(1, -1) : \"\";\n      return s = s.trim(), this.rules.other.startAngleBracket.test(s) && (this.options.pedantic && !this.rules.other.endAngleBracket.test(n) ? s = s.slice(1) : s = s.slice(1, -1)), de(t, {\n        href: s && s.replace(this.rules.inline.anyPunctuation, \"$1\"),\n        title: i && i.replace(this.rules.inline.anyPunctuation, \"$1\")\n      }, t[0], this.lexer, this.rules);\n    }\n  }\n  reflink(e, t) {\n    let n;\n    if ((n = this.rules.inline.reflink.exec(e)) || (n = this.rules.inline.nolink.exec(e))) {\n      let s = (n[2] || n[1]).replace(this.rules.other.multipleSpaceGlobal, \" \"),\n        i = t[s.toLowerCase()];\n      if (!i) {\n        let r = n[0].charAt(0);\n        return {\n          type: \"text\",\n          raw: r,\n          text: r\n        };\n      }\n      return de(n, i, n[0], this.lexer, this.rules);\n    }\n  }\n  emStrong(e, t) {\n    let n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n    let s = this.rules.inline.emStrongLDelim.exec(e);\n    if (!s || s[3] && n.match(this.rules.other.unicodeAlphaNumeric)) return;\n    if (!(s[1] || s[2] || \"\") || !n || this.rules.inline.punctuation.exec(n)) {\n      let r = [...s[0]].length - 1,\n        o,\n        l,\n        c = r,\n        p = 0,\n        u = s[0][0] === \"*\" ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n      for (u.lastIndex = 0, t = t.slice(-1 * e.length + r); (s = u.exec(t)) != null;) {\n        if (o = s[1] || s[2] || s[3] || s[4] || s[5] || s[6], !o) continue;\n        if (l = [...o].length, s[3] || s[4]) {\n          c += l;\n          continue;\n        } else if ((s[5] || s[6]) && r % 3 && !((r + l) % 3)) {\n          p += l;\n          continue;\n        }\n        if (c -= l, c > 0) continue;\n        l = Math.min(l, l + c + p);\n        let d = [...s[0]][0].length,\n          g = e.slice(0, r + s.index + d + l);\n        if (Math.min(r, l) % 2) {\n          let f = g.slice(1, -1);\n          return {\n            type: \"em\",\n            raw: g,\n            text: f,\n            tokens: this.lexer.inlineTokens(f)\n          };\n        }\n        let x = g.slice(2, -2);\n        return {\n          type: \"strong\",\n          raw: g,\n          text: x,\n          tokens: this.lexer.inlineTokens(x)\n        };\n      }\n    }\n  }\n  codespan(e) {\n    let t = this.rules.inline.code.exec(e);\n    if (t) {\n      let n = t[2].replace(this.rules.other.newLineCharGlobal, \" \"),\n        s = this.rules.other.nonSpaceChar.test(n),\n        i = this.rules.other.startingSpaceChar.test(n) && this.rules.other.endingSpaceChar.test(n);\n      return s && i && (n = n.substring(1, n.length - 1)), {\n        type: \"codespan\",\n        raw: t[0],\n        text: n\n      };\n    }\n  }\n  br(e) {\n    let t = this.rules.inline.br.exec(e);\n    if (t) return {\n      type: \"br\",\n      raw: t[0]\n    };\n  }\n  del(e) {\n    let t = this.rules.inline.del.exec(e);\n    if (t) return {\n      type: \"del\",\n      raw: t[0],\n      text: t[2],\n      tokens: this.lexer.inlineTokens(t[2])\n    };\n  }\n  autolink(e) {\n    let t = this.rules.inline.autolink.exec(e);\n    if (t) {\n      let n, s;\n      return t[2] === \"@\" ? (n = t[1], s = \"mailto:\" + n) : (n = t[1], s = n), {\n        type: \"link\",\n        raw: t[0],\n        text: n,\n        href: s,\n        tokens: [{\n          type: \"text\",\n          raw: n,\n          text: n\n        }]\n      };\n    }\n  }\n  url(e) {\n    let t;\n    if (t = this.rules.inline.url.exec(e)) {\n      let n, s;\n      if (t[2] === \"@\") n = t[0], s = \"mailto:\" + n;else {\n        let i;\n        do {\n          var _this$rules$inline$_b, _this$rules$inline$_b2;\n          i = t[0], t[0] = (_this$rules$inline$_b = (_this$rules$inline$_b2 = this.rules.inline._backpedal.exec(t[0])) === null || _this$rules$inline$_b2 === void 0 ? void 0 : _this$rules$inline$_b2[0]) !== null && _this$rules$inline$_b !== void 0 ? _this$rules$inline$_b : \"\";\n        } while (i !== t[0]);\n        n = t[0], t[1] === \"www.\" ? s = \"http://\" + t[0] : s = t[0];\n      }\n      return {\n        type: \"link\",\n        raw: t[0],\n        text: n,\n        href: s,\n        tokens: [{\n          type: \"text\",\n          raw: n,\n          text: n\n        }]\n      };\n    }\n  }\n  inlineText(e) {\n    let t = this.rules.inline.text.exec(e);\n    if (t) {\n      let n = this.lexer.state.inRawBlock;\n      return {\n        type: \"text\",\n        raw: t[0],\n        text: t[0],\n        escaped: n\n      };\n    }\n  }\n};\nvar b = class a {\n  constructor(e) {\n    _defineProperty(this, \"tokens\", void 0);\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"state\", void 0);\n    _defineProperty(this, \"tokenizer\", void 0);\n    _defineProperty(this, \"inlineQueue\", void 0);\n    this.tokens = [], this.tokens.links = Object.create(null), this.options = e || w, this.options.tokenizer = this.options.tokenizer || new S(), this.tokenizer = this.options.tokenizer, this.tokenizer.options = this.options, this.tokenizer.lexer = this, this.inlineQueue = [], this.state = {\n      inLink: !1,\n      inRawBlock: !1,\n      top: !0\n    };\n    let t = {\n      other: m,\n      block: O.normal,\n      inline: P.normal\n    };\n    this.options.pedantic ? (t.block = O.pedantic, t.inline = P.pedantic) : this.options.gfm && (t.block = O.gfm, this.options.breaks ? t.inline = P.breaks : t.inline = P.gfm), this.tokenizer.rules = t;\n  }\n  static get rules() {\n    return {\n      block: O,\n      inline: P\n    };\n  }\n  static lex(e, t) {\n    return new a(t).lex(e);\n  }\n  static lexInline(e, t) {\n    return new a(t).inlineTokens(e);\n  }\n  lex(e) {\n    e = e.replace(m.carriageReturn, \"\\n\"), this.blockTokens(e, this.tokens);\n    for (let t = 0; t < this.inlineQueue.length; t++) {\n      let n = this.inlineQueue[t];\n      this.inlineTokens(n.src, n.tokens);\n    }\n    return this.inlineQueue = [], this.tokens;\n  }\n  blockTokens(e) {\n    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !1;\n    for (this.options.pedantic && (e = e.replace(m.tabCharGlobal, \"    \").replace(m.spaceLine, \"\")); e;) {\n      var _this$options$extensi, _this$options$extensi2;\n      let s;\n      if ((_this$options$extensi = this.options.extensions) !== null && _this$options$extensi !== void 0 && (_this$options$extensi = _this$options$extensi.block) !== null && _this$options$extensi !== void 0 && _this$options$extensi.some(r => (s = r.call({\n        lexer: this\n      }, e, t)) ? (e = e.substring(s.raw.length), t.push(s), !0) : !1)) continue;\n      if (s = this.tokenizer.space(e)) {\n        e = e.substring(s.raw.length);\n        let r = t.at(-1);\n        s.raw.length === 1 && r !== void 0 ? r.raw += \"\\n\" : t.push(s);\n        continue;\n      }\n      if (s = this.tokenizer.code(e)) {\n        e = e.substring(s.raw.length);\n        let r = t.at(-1);\n        (r === null || r === void 0 ? void 0 : r.type) === \"paragraph\" || (r === null || r === void 0 ? void 0 : r.type) === \"text\" ? (r.raw += \"\\n\" + s.raw, r.text += \"\\n\" + s.text, this.inlineQueue.at(-1).src = r.text) : t.push(s);\n        continue;\n      }\n      if (s = this.tokenizer.fences(e)) {\n        e = e.substring(s.raw.length), t.push(s);\n        continue;\n      }\n      if (s = this.tokenizer.heading(e)) {\n        e = e.substring(s.raw.length), t.push(s);\n        continue;\n      }\n      if (s = this.tokenizer.hr(e)) {\n        e = e.substring(s.raw.length), t.push(s);\n        continue;\n      }\n      if (s = this.tokenizer.blockquote(e)) {\n        e = e.substring(s.raw.length), t.push(s);\n        continue;\n      }\n      if (s = this.tokenizer.list(e)) {\n        e = e.substring(s.raw.length), t.push(s);\n        continue;\n      }\n      if (s = this.tokenizer.html(e)) {\n        e = e.substring(s.raw.length), t.push(s);\n        continue;\n      }\n      if (s = this.tokenizer.def(e)) {\n        e = e.substring(s.raw.length);\n        let r = t.at(-1);\n        (r === null || r === void 0 ? void 0 : r.type) === \"paragraph\" || (r === null || r === void 0 ? void 0 : r.type) === \"text\" ? (r.raw += \"\\n\" + s.raw, r.text += \"\\n\" + s.raw, this.inlineQueue.at(-1).src = r.text) : this.tokens.links[s.tag] || (this.tokens.links[s.tag] = {\n          href: s.href,\n          title: s.title\n        });\n        continue;\n      }\n      if (s = this.tokenizer.table(e)) {\n        e = e.substring(s.raw.length), t.push(s);\n        continue;\n      }\n      if (s = this.tokenizer.lheading(e)) {\n        e = e.substring(s.raw.length), t.push(s);\n        continue;\n      }\n      let i = e;\n      if ((_this$options$extensi2 = this.options.extensions) !== null && _this$options$extensi2 !== void 0 && _this$options$extensi2.startBlock) {\n        let r = 1 / 0,\n          o = e.slice(1),\n          l;\n        this.options.extensions.startBlock.forEach(c => {\n          l = c.call({\n            lexer: this\n          }, o), typeof l == \"number\" && l >= 0 && (r = Math.min(r, l));\n        }), r < 1 / 0 && r >= 0 && (i = e.substring(0, r + 1));\n      }\n      if (this.state.top && (s = this.tokenizer.paragraph(i))) {\n        let r = t.at(-1);\n        n && (r === null || r === void 0 ? void 0 : r.type) === \"paragraph\" ? (r.raw += \"\\n\" + s.raw, r.text += \"\\n\" + s.text, this.inlineQueue.pop(), this.inlineQueue.at(-1).src = r.text) : t.push(s), n = i.length !== e.length, e = e.substring(s.raw.length);\n        continue;\n      }\n      if (s = this.tokenizer.text(e)) {\n        e = e.substring(s.raw.length);\n        let r = t.at(-1);\n        (r === null || r === void 0 ? void 0 : r.type) === \"text\" ? (r.raw += \"\\n\" + s.raw, r.text += \"\\n\" + s.text, this.inlineQueue.pop(), this.inlineQueue.at(-1).src = r.text) : t.push(s);\n        continue;\n      }\n      if (e) {\n        let r = \"Infinite loop on byte: \" + e.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(r);\n          break;\n        } else throw new Error(r);\n      }\n    }\n    return this.state.top = !0, t;\n  }\n  inline(e) {\n    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    return this.inlineQueue.push({\n      src: e,\n      tokens: t\n    }), t;\n  }\n  inlineTokens(e) {\n    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let n = e,\n      s = null;\n    if (this.tokens.links) {\n      let o = Object.keys(this.tokens.links);\n      if (o.length > 0) for (; (s = this.tokenizer.rules.inline.reflinkSearch.exec(n)) != null;) o.includes(s[0].slice(s[0].lastIndexOf(\"[\") + 1, -1)) && (n = n.slice(0, s.index) + \"[\" + \"a\".repeat(s[0].length - 2) + \"]\" + n.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex));\n    }\n    for (; (s = this.tokenizer.rules.inline.anyPunctuation.exec(n)) != null;) n = n.slice(0, s.index) + \"++\" + n.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n    for (; (s = this.tokenizer.rules.inline.blockSkip.exec(n)) != null;) n = n.slice(0, s.index) + \"[\" + \"a\".repeat(s[0].length - 2) + \"]\" + n.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    let i = !1,\n      r = \"\";\n    for (; e;) {\n      var _this$options$extensi3, _this$options$extensi4;\n      i || (r = \"\"), i = !1;\n      let o;\n      if ((_this$options$extensi3 = this.options.extensions) !== null && _this$options$extensi3 !== void 0 && (_this$options$extensi3 = _this$options$extensi3.inline) !== null && _this$options$extensi3 !== void 0 && _this$options$extensi3.some(c => (o = c.call({\n        lexer: this\n      }, e, t)) ? (e = e.substring(o.raw.length), t.push(o), !0) : !1)) continue;\n      if (o = this.tokenizer.escape(e)) {\n        e = e.substring(o.raw.length), t.push(o);\n        continue;\n      }\n      if (o = this.tokenizer.tag(e)) {\n        e = e.substring(o.raw.length), t.push(o);\n        continue;\n      }\n      if (o = this.tokenizer.link(e)) {\n        e = e.substring(o.raw.length), t.push(o);\n        continue;\n      }\n      if (o = this.tokenizer.reflink(e, this.tokens.links)) {\n        e = e.substring(o.raw.length);\n        let c = t.at(-1);\n        o.type === \"text\" && (c === null || c === void 0 ? void 0 : c.type) === \"text\" ? (c.raw += o.raw, c.text += o.text) : t.push(o);\n        continue;\n      }\n      if (o = this.tokenizer.emStrong(e, n, r)) {\n        e = e.substring(o.raw.length), t.push(o);\n        continue;\n      }\n      if (o = this.tokenizer.codespan(e)) {\n        e = e.substring(o.raw.length), t.push(o);\n        continue;\n      }\n      if (o = this.tokenizer.br(e)) {\n        e = e.substring(o.raw.length), t.push(o);\n        continue;\n      }\n      if (o = this.tokenizer.del(e)) {\n        e = e.substring(o.raw.length), t.push(o);\n        continue;\n      }\n      if (o = this.tokenizer.autolink(e)) {\n        e = e.substring(o.raw.length), t.push(o);\n        continue;\n      }\n      if (!this.state.inLink && (o = this.tokenizer.url(e))) {\n        e = e.substring(o.raw.length), t.push(o);\n        continue;\n      }\n      let l = e;\n      if ((_this$options$extensi4 = this.options.extensions) !== null && _this$options$extensi4 !== void 0 && _this$options$extensi4.startInline) {\n        let c = 1 / 0,\n          p = e.slice(1),\n          u;\n        this.options.extensions.startInline.forEach(d => {\n          u = d.call({\n            lexer: this\n          }, p), typeof u == \"number\" && u >= 0 && (c = Math.min(c, u));\n        }), c < 1 / 0 && c >= 0 && (l = e.substring(0, c + 1));\n      }\n      if (o = this.tokenizer.inlineText(l)) {\n        e = e.substring(o.raw.length), o.raw.slice(-1) !== \"_\" && (r = o.raw.slice(-1)), i = !0;\n        let c = t.at(-1);\n        (c === null || c === void 0 ? void 0 : c.type) === \"text\" ? (c.raw += o.raw, c.text += o.text) : t.push(o);\n        continue;\n      }\n      if (e) {\n        let c = \"Infinite loop on byte: \" + e.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(c);\n          break;\n        } else throw new Error(c);\n      }\n    }\n    return t;\n  }\n};\nvar $ = class $ {\n  constructor(e) {\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"parser\", void 0);\n    this.options = e || w;\n  }\n  space(e) {\n    return \"\";\n  }\n  code(_ref) {\n    var _match;\n    let {\n      text: e,\n      lang: t,\n      escaped: n\n    } = _ref;\n    let s = (_match = (t || \"\").match(m.notSpaceStart)) === null || _match === void 0 ? void 0 : _match[0],\n      i = e.replace(m.endingNewline, \"\") + \"\\n\";\n    return s ? '<pre><code class=\"language-' + R(s) + '\">' + (n ? i : R(i, !0)) + \"</code></pre>\\n\" : \"<pre><code>\" + (n ? i : R(i, !0)) + \"</code></pre>\\n\";\n  }\n  blockquote(_ref2) {\n    let {\n      tokens: e\n    } = _ref2;\n    return \"<blockquote>\\n\".concat(this.parser.parse(e), \"</blockquote>\\n\");\n  }\n  html(_ref3) {\n    let {\n      text: e\n    } = _ref3;\n    return e;\n  }\n  heading(_ref4) {\n    let {\n      tokens: e,\n      depth: t\n    } = _ref4;\n    return \"<h\".concat(t, \">\").concat(this.parser.parseInline(e), \"</h\").concat(t, \">\\n\");\n  }\n  hr(e) {\n    return \"<hr>\\n\";\n  }\n  list(e) {\n    let t = e.ordered,\n      n = e.start,\n      s = \"\";\n    for (let o = 0; o < e.items.length; o++) {\n      let l = e.items[o];\n      s += this.listitem(l);\n    }\n    let i = t ? \"ol\" : \"ul\",\n      r = t && n !== 1 ? ' start=\"' + n + '\"' : \"\";\n    return \"<\" + i + r + \">\\n\" + s + \"</\" + i + \">\\n\";\n  }\n  listitem(e) {\n    let t = \"\";\n    if (e.task) {\n      var _e$tokens$;\n      let n = this.checkbox({\n        checked: !!e.checked\n      });\n      e.loose ? ((_e$tokens$ = e.tokens[0]) === null || _e$tokens$ === void 0 ? void 0 : _e$tokens$.type) === \"paragraph\" ? (e.tokens[0].text = n + \" \" + e.tokens[0].text, e.tokens[0].tokens && e.tokens[0].tokens.length > 0 && e.tokens[0].tokens[0].type === \"text\" && (e.tokens[0].tokens[0].text = n + \" \" + R(e.tokens[0].tokens[0].text), e.tokens[0].tokens[0].escaped = !0)) : e.tokens.unshift({\n        type: \"text\",\n        raw: n + \" \",\n        text: n + \" \",\n        escaped: !0\n      }) : t += n + \" \";\n    }\n    return t += this.parser.parse(e.tokens, !!e.loose), \"<li>\".concat(t, \"</li>\\n\");\n  }\n  checkbox(_ref5) {\n    let {\n      checked: e\n    } = _ref5;\n    return \"<input \" + (e ? 'checked=\"\" ' : \"\") + 'disabled=\"\" type=\"checkbox\">';\n  }\n  paragraph(_ref6) {\n    let {\n      tokens: e\n    } = _ref6;\n    return \"<p>\".concat(this.parser.parseInline(e), \"</p>\\n\");\n  }\n  table(e) {\n    let t = \"\",\n      n = \"\";\n    for (let i = 0; i < e.header.length; i++) n += this.tablecell(e.header[i]);\n    t += this.tablerow({\n      text: n\n    });\n    let s = \"\";\n    for (let i = 0; i < e.rows.length; i++) {\n      let r = e.rows[i];\n      n = \"\";\n      for (let o = 0; o < r.length; o++) n += this.tablecell(r[o]);\n      s += this.tablerow({\n        text: n\n      });\n    }\n    return s && (s = \"<tbody>\".concat(s, \"</tbody>\")), \"<table>\\n<thead>\\n\" + t + \"</thead>\\n\" + s + \"</table>\\n\";\n  }\n  tablerow(_ref7) {\n    let {\n      text: e\n    } = _ref7;\n    return \"<tr>\\n\".concat(e, \"</tr>\\n\");\n  }\n  tablecell(e) {\n    let t = this.parser.parseInline(e.tokens),\n      n = e.header ? \"th\" : \"td\";\n    return (e.align ? \"<\".concat(n, \" align=\\\"\").concat(e.align, \"\\\">\") : \"<\".concat(n, \">\")) + t + \"</\".concat(n, \">\\n\");\n  }\n  strong(_ref8) {\n    let {\n      tokens: e\n    } = _ref8;\n    return \"<strong>\".concat(this.parser.parseInline(e), \"</strong>\");\n  }\n  em(_ref9) {\n    let {\n      tokens: e\n    } = _ref9;\n    return \"<em>\".concat(this.parser.parseInline(e), \"</em>\");\n  }\n  codespan(_ref0) {\n    let {\n      text: e\n    } = _ref0;\n    return \"<code>\".concat(R(e, !0), \"</code>\");\n  }\n  br(e) {\n    return \"<br>\";\n  }\n  del(_ref1) {\n    let {\n      tokens: e\n    } = _ref1;\n    return \"<del>\".concat(this.parser.parseInline(e), \"</del>\");\n  }\n  link(_ref10) {\n    let {\n      href: e,\n      title: t,\n      tokens: n\n    } = _ref10;\n    let s = this.parser.parseInline(n),\n      i = J(e);\n    if (i === null) return s;\n    e = i;\n    let r = '<a href=\"' + e + '\"';\n    return t && (r += ' title=\"' + R(t) + '\"'), r += \">\" + s + \"</a>\", r;\n  }\n  image(_ref11) {\n    let {\n      href: e,\n      title: t,\n      text: n,\n      tokens: s\n    } = _ref11;\n    s && (n = this.parser.parseInline(s, this.parser.textRenderer));\n    let i = J(e);\n    if (i === null) return R(n);\n    e = i;\n    let r = \"<img src=\\\"\".concat(e, \"\\\" alt=\\\"\").concat(n, \"\\\"\");\n    return t && (r += \" title=\\\"\".concat(R(t), \"\\\"\")), r += \">\", r;\n  }\n  text(e) {\n    return \"tokens\" in e && e.tokens ? this.parser.parseInline(e.tokens) : \"escaped\" in e && e.escaped ? e.text : R(e.text);\n  }\n};\nvar _ = class {\n  strong(_ref12) {\n    let {\n      text: e\n    } = _ref12;\n    return e;\n  }\n  em(_ref13) {\n    let {\n      text: e\n    } = _ref13;\n    return e;\n  }\n  codespan(_ref14) {\n    let {\n      text: e\n    } = _ref14;\n    return e;\n  }\n  del(_ref15) {\n    let {\n      text: e\n    } = _ref15;\n    return e;\n  }\n  html(_ref16) {\n    let {\n      text: e\n    } = _ref16;\n    return e;\n  }\n  text(_ref17) {\n    let {\n      text: e\n    } = _ref17;\n    return e;\n  }\n  link(_ref18) {\n    let {\n      text: e\n    } = _ref18;\n    return \"\" + e;\n  }\n  image(_ref19) {\n    let {\n      text: e\n    } = _ref19;\n    return \"\" + e;\n  }\n  br() {\n    return \"\";\n  }\n};\nvar T = class a {\n  constructor(e) {\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"renderer\", void 0);\n    _defineProperty(this, \"textRenderer\", void 0);\n    this.options = e || w, this.options.renderer = this.options.renderer || new $(), this.renderer = this.options.renderer, this.renderer.options = this.options, this.renderer.parser = this, this.textRenderer = new _();\n  }\n  static parse(e, t) {\n    return new a(t).parse(e);\n  }\n  static parseInline(e, t) {\n    return new a(t).parseInline(e);\n  }\n  parse(e) {\n    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !0;\n    let n = \"\";\n    for (let s = 0; s < e.length; s++) {\n      var _this$options$extensi5;\n      let i = e[s];\n      if ((_this$options$extensi5 = this.options.extensions) !== null && _this$options$extensi5 !== void 0 && (_this$options$extensi5 = _this$options$extensi5.renderers) !== null && _this$options$extensi5 !== void 0 && _this$options$extensi5[i.type]) {\n        let o = i,\n          l = this.options.extensions.renderers[o.type].call({\n            parser: this\n          }, o);\n        if (l !== !1 || ![\"space\", \"hr\", \"heading\", \"code\", \"table\", \"blockquote\", \"list\", \"html\", \"paragraph\", \"text\"].includes(o.type)) {\n          n += l || \"\";\n          continue;\n        }\n      }\n      let r = i;\n      switch (r.type) {\n        case \"space\":\n          {\n            n += this.renderer.space(r);\n            continue;\n          }\n        case \"hr\":\n          {\n            n += this.renderer.hr(r);\n            continue;\n          }\n        case \"heading\":\n          {\n            n += this.renderer.heading(r);\n            continue;\n          }\n        case \"code\":\n          {\n            n += this.renderer.code(r);\n            continue;\n          }\n        case \"table\":\n          {\n            n += this.renderer.table(r);\n            continue;\n          }\n        case \"blockquote\":\n          {\n            n += this.renderer.blockquote(r);\n            continue;\n          }\n        case \"list\":\n          {\n            n += this.renderer.list(r);\n            continue;\n          }\n        case \"html\":\n          {\n            n += this.renderer.html(r);\n            continue;\n          }\n        case \"paragraph\":\n          {\n            n += this.renderer.paragraph(r);\n            continue;\n          }\n        case \"text\":\n          {\n            let o = r,\n              l = this.renderer.text(o);\n            for (; s + 1 < e.length && e[s + 1].type === \"text\";) o = e[++s], l += \"\\n\" + this.renderer.text(o);\n            t ? n += this.renderer.paragraph({\n              type: \"paragraph\",\n              raw: l,\n              text: l,\n              tokens: [{\n                type: \"text\",\n                raw: l,\n                text: l,\n                escaped: !0\n              }]\n            }) : n += l;\n            continue;\n          }\n        default:\n          {\n            let o = 'Token with \"' + r.type + '\" type was not found.';\n            if (this.options.silent) return console.error(o), \"\";\n            throw new Error(o);\n          }\n      }\n    }\n    return n;\n  }\n  parseInline(e) {\n    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.renderer;\n    let n = \"\";\n    for (let s = 0; s < e.length; s++) {\n      var _this$options$extensi6;\n      let i = e[s];\n      if ((_this$options$extensi6 = this.options.extensions) !== null && _this$options$extensi6 !== void 0 && (_this$options$extensi6 = _this$options$extensi6.renderers) !== null && _this$options$extensi6 !== void 0 && _this$options$extensi6[i.type]) {\n        let o = this.options.extensions.renderers[i.type].call({\n          parser: this\n        }, i);\n        if (o !== !1 || ![\"escape\", \"html\", \"link\", \"image\", \"strong\", \"em\", \"codespan\", \"br\", \"del\", \"text\"].includes(i.type)) {\n          n += o || \"\";\n          continue;\n        }\n      }\n      let r = i;\n      switch (r.type) {\n        case \"escape\":\n          {\n            n += t.text(r);\n            break;\n          }\n        case \"html\":\n          {\n            n += t.html(r);\n            break;\n          }\n        case \"link\":\n          {\n            n += t.link(r);\n            break;\n          }\n        case \"image\":\n          {\n            n += t.image(r);\n            break;\n          }\n        case \"strong\":\n          {\n            n += t.strong(r);\n            break;\n          }\n        case \"em\":\n          {\n            n += t.em(r);\n            break;\n          }\n        case \"codespan\":\n          {\n            n += t.codespan(r);\n            break;\n          }\n        case \"br\":\n          {\n            n += t.br(r);\n            break;\n          }\n        case \"del\":\n          {\n            n += t.del(r);\n            break;\n          }\n        case \"text\":\n          {\n            n += t.text(r);\n            break;\n          }\n        default:\n          {\n            let o = 'Token with \"' + r.type + '\" type was not found.';\n            if (this.options.silent) return console.error(o), \"\";\n            throw new Error(o);\n          }\n      }\n    }\n    return n;\n  }\n};\nvar L = (_Class3 = class L {\n  constructor(e) {\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"block\", void 0);\n    this.options = e || w;\n  }\n  preprocess(e) {\n    return e;\n  }\n  postprocess(e) {\n    return e;\n  }\n  processAllTokens(e) {\n    return e;\n  }\n  provideLexer() {\n    return this.block ? b.lex : b.lexInline;\n  }\n  provideParser() {\n    return this.block ? T.parse : T.parseInline;\n  }\n}, _defineProperty(_Class3, \"passThroughHooks\", new Set([\"preprocess\", \"postprocess\", \"processAllTokens\"])), _Class3);\nvar B = class B {\n  constructor() {\n    _defineProperty(this, \"defaults\", M());\n    _defineProperty(this, \"options\", this.setOptions);\n    _defineProperty(this, \"parse\", this.parseMarkdown(!0));\n    _defineProperty(this, \"parseInline\", this.parseMarkdown(!1));\n    _defineProperty(this, \"Parser\", T);\n    _defineProperty(this, \"Renderer\", $);\n    _defineProperty(this, \"TextRenderer\", _);\n    _defineProperty(this, \"Lexer\", b);\n    _defineProperty(this, \"Tokenizer\", S);\n    _defineProperty(this, \"Hooks\", L);\n    this.use(...arguments);\n  }\n  walkTokens(e, t) {\n    let n = [];\n    for (let s of e) switch (n = n.concat(t.call(this, s)), s.type) {\n      case \"table\":\n        {\n          let i = s;\n          for (let r of i.header) n = n.concat(this.walkTokens(r.tokens, t));\n          for (let r of i.rows) for (let o of r) n = n.concat(this.walkTokens(o.tokens, t));\n          break;\n        }\n      case \"list\":\n        {\n          let i = s;\n          n = n.concat(this.walkTokens(i.items, t));\n          break;\n        }\n      default:\n        {\n          var _this$defaults$extens;\n          let i = s;\n          (_this$defaults$extens = this.defaults.extensions) !== null && _this$defaults$extens !== void 0 && (_this$defaults$extens = _this$defaults$extens.childTokens) !== null && _this$defaults$extens !== void 0 && _this$defaults$extens[i.type] ? this.defaults.extensions.childTokens[i.type].forEach(r => {\n            let o = i[r].flat(1 / 0);\n            n = n.concat(this.walkTokens(o, t));\n          }) : i.tokens && (n = n.concat(this.walkTokens(i.tokens, t)));\n        }\n    }\n    return n;\n  }\n  use() {\n    let t = this.defaults.extensions || {\n      renderers: {},\n      childTokens: {}\n    };\n    for (var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++) {\n      e[_key] = arguments[_key];\n    }\n    return e.forEach(n => {\n      let s = _objectSpread({}, n);\n      if (s.async = this.defaults.async || s.async || !1, n.extensions && (n.extensions.forEach(i => {\n        if (!i.name) throw new Error(\"extension name required\");\n        if (\"renderer\" in i) {\n          let r = t.renderers[i.name];\n          r ? t.renderers[i.name] = function () {\n            for (var _len2 = arguments.length, o = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n              o[_key2] = arguments[_key2];\n            }\n            let l = i.renderer.apply(this, o);\n            return l === !1 && (l = r.apply(this, o)), l;\n          } : t.renderers[i.name] = i.renderer;\n        }\n        if (\"tokenizer\" in i) {\n          if (!i.level || i.level !== \"block\" && i.level !== \"inline\") throw new Error(\"extension level must be 'block' or 'inline'\");\n          let r = t[i.level];\n          r ? r.unshift(i.tokenizer) : t[i.level] = [i.tokenizer], i.start && (i.level === \"block\" ? t.startBlock ? t.startBlock.push(i.start) : t.startBlock = [i.start] : i.level === \"inline\" && (t.startInline ? t.startInline.push(i.start) : t.startInline = [i.start]));\n        }\n        \"childTokens\" in i && i.childTokens && (t.childTokens[i.name] = i.childTokens);\n      }), s.extensions = t), n.renderer) {\n        let i = this.defaults.renderer || new $(this.defaults);\n        for (let r in n.renderer) {\n          if (!(r in i)) throw new Error(\"renderer '\".concat(r, \"' does not exist\"));\n          if ([\"options\", \"parser\"].includes(r)) continue;\n          let o = r,\n            l = n.renderer[o],\n            c = i[o];\n          i[o] = function () {\n            for (var _len3 = arguments.length, p = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n              p[_key3] = arguments[_key3];\n            }\n            let u = l.apply(i, p);\n            return u === !1 && (u = c.apply(i, p)), u || \"\";\n          };\n        }\n        s.renderer = i;\n      }\n      if (n.tokenizer) {\n        let i = this.defaults.tokenizer || new S(this.defaults);\n        for (let r in n.tokenizer) {\n          if (!(r in i)) throw new Error(\"tokenizer '\".concat(r, \"' does not exist\"));\n          if ([\"options\", \"rules\", \"lexer\"].includes(r)) continue;\n          let o = r,\n            l = n.tokenizer[o],\n            c = i[o];\n          i[o] = function () {\n            for (var _len4 = arguments.length, p = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n              p[_key4] = arguments[_key4];\n            }\n            let u = l.apply(i, p);\n            return u === !1 && (u = c.apply(i, p)), u;\n          };\n        }\n        s.tokenizer = i;\n      }\n      if (n.hooks) {\n        let i = this.defaults.hooks || new L();\n        for (let r in n.hooks) {\n          if (!(r in i)) throw new Error(\"hook '\".concat(r, \"' does not exist\"));\n          if ([\"options\", \"block\"].includes(r)) continue;\n          let o = r,\n            l = n.hooks[o],\n            c = i[o];\n          L.passThroughHooks.has(r) ? i[o] = p => {\n            if (this.defaults.async) return Promise.resolve(l.call(i, p)).then(d => c.call(i, d));\n            let u = l.call(i, p);\n            return c.call(i, u);\n          } : i[o] = function () {\n            for (var _len5 = arguments.length, p = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n              p[_key5] = arguments[_key5];\n            }\n            let u = l.apply(i, p);\n            return u === !1 && (u = c.apply(i, p)), u;\n          };\n        }\n        s.hooks = i;\n      }\n      if (n.walkTokens) {\n        let i = this.defaults.walkTokens,\n          r = n.walkTokens;\n        s.walkTokens = function (o) {\n          let l = [];\n          return l.push(r.call(this, o)), i && (l = l.concat(i.call(this, o))), l;\n        };\n      }\n      this.defaults = _objectSpread(_objectSpread({}, this.defaults), s);\n    }), this;\n  }\n  setOptions(e) {\n    return this.defaults = _objectSpread(_objectSpread({}, this.defaults), e), this;\n  }\n  lexer(e, t) {\n    return b.lex(e, t !== null && t !== void 0 ? t : this.defaults);\n  }\n  parser(e, t) {\n    return T.parse(e, t !== null && t !== void 0 ? t : this.defaults);\n  }\n  parseMarkdown(e) {\n    return (n, s) => {\n      let i = _objectSpread({}, s),\n        r = _objectSpread(_objectSpread({}, this.defaults), i),\n        o = this.onError(!!r.silent, !!r.async);\n      if (this.defaults.async === !0 && i.async === !1) return o(new Error(\"marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.\"));\n      if (typeof n > \"u\" || n === null) return o(new Error(\"marked(): input parameter is undefined or null\"));\n      if (typeof n != \"string\") return o(new Error(\"marked(): input parameter is of type \" + Object.prototype.toString.call(n) + \", string expected\"));\n      r.hooks && (r.hooks.options = r, r.hooks.block = e);\n      let l = r.hooks ? r.hooks.provideLexer() : e ? b.lex : b.lexInline,\n        c = r.hooks ? r.hooks.provideParser() : e ? T.parse : T.parseInline;\n      if (r.async) return Promise.resolve(r.hooks ? r.hooks.preprocess(n) : n).then(p => l(p, r)).then(p => r.hooks ? r.hooks.processAllTokens(p) : p).then(p => r.walkTokens ? Promise.all(this.walkTokens(p, r.walkTokens)).then(() => p) : p).then(p => c(p, r)).then(p => r.hooks ? r.hooks.postprocess(p) : p).catch(o);\n      try {\n        r.hooks && (n = r.hooks.preprocess(n));\n        let p = l(n, r);\n        r.hooks && (p = r.hooks.processAllTokens(p)), r.walkTokens && this.walkTokens(p, r.walkTokens);\n        let u = c(p, r);\n        return r.hooks && (u = r.hooks.postprocess(u)), u;\n      } catch (p) {\n        return o(p);\n      }\n    };\n  }\n  onError(e, t) {\n    return n => {\n      if (n.message += \"\\nPlease report this to https://github.com/markedjs/marked.\", e) {\n        let s = \"<p>An error occurred:</p><pre>\" + R(n.message + \"\", !0) + \"</pre>\";\n        return t ? Promise.resolve(s) : s;\n      }\n      if (t) return Promise.reject(n);\n      throw n;\n    };\n  }\n};\nvar z = new B();\nfunction k(a, e) {\n  return z.parse(a, e);\n}\nk.options = k.setOptions = function (a) {\n  return z.setOptions(a), k.defaults = z.defaults, H(k.defaults), k;\n};\nk.getDefaults = M;\nk.defaults = w;\nk.use = function () {\n  return z.use(...arguments), k.defaults = z.defaults, H(k.defaults), k;\n};\nk.walkTokens = function (a, e) {\n  return z.walkTokens(a, e);\n};\nk.parseInline = z.parseInline;\nk.Parser = T;\nk.parser = T.parse;\nk.Renderer = $;\nk.TextRenderer = _;\nk.Lexer = b;\nk.lexer = b.lex;\nk.Tokenizer = S;\nk.Hooks = L;\nk.parse = k;\nvar Dt = k.options,\n  Zt = k.setOptions,\n  Gt = k.use,\n  Ht = k.walkTokens,\n  Nt = k.parseInline,\n  jt = k,\n  Ft = T.parse,\n  Qt = b.lex;\nexport { L as Hooks, b as Lexer, B as Marked, T as Parser, $ as Renderer, _ as TextRenderer, S as Tokenizer, w as defaults, M as getDefaults, Qt as lexer, k as marked, Dt as options, jt as parse, Nt as parseInline, Ft as parser, Zt as setOptions, Gt as use, Ht as walkTokens };","map":{"version":3,"names":["M","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","w","H","a","C","exec","h","e","arguments","length","undefined","t","source","n","replace","s","i","r","m","caret","getRegex","RegExp","codeRemoveIndent","outputLinkReplace","indentCodeCompensation","beginningSpace","endingHash","startingSpaceChar","endingSpaceChar","nonSpaceChar","newLineCharGlobal","tabCharGlobal","multipleSpaceGlobal","blankLine","doubleBlankLine","blockquoteStart","blockquoteSetextReplace","blockquoteSetextReplace2","listReplaceTabs","listReplaceNesting","listIsTask","listReplaceTask","anyLine","hrefBrackets","tableDelimiter","tableAlignChars","tableRowBlankLine","tableAlignRight","tableAlignCenter","tableAlignLeft","startATag","endATag","startPreScriptTag","endPreScriptTag","startAngleBracket","endAngleBracket","pedanticHrefTitle","unicodeAlphaNumeric","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","unescapeTest","percentDecode","findPipe","splitPipe","slashPipe","carriageReturn","spaceLine","notSpaceStart","endingNewline","listItemRegex","concat","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","htmlBeginRegex","xe","be","Te","I","we","j","re","ie","ye","F","Re","Q","Se","$e","v","U","_e","oe","Le","K","blockquote","code","def","fences","heading","hr","html","lheading","list","newline","paragraph","table","text","se","ze","_objectSpread","Me","Pe","Ae","le","Ee","D","X","ae","Ce","ce","Ie","Oe","Be","pe","qe","ve","ue","De","Ze","Ge","He","Ne","je","Fe","q","Qe","he","ke","Ue","W","_backpedal","anyPunctuation","autolink","blockSkip","br","del","emStrongLDelim","emStrongRDelimAst","emStrongRDelimUnd","escape","link","nolink","punctuation","reflink","reflinkSearch","tag","url","Ke","N","Xe","O","normal","P","We","ge","R","test","J","encodeURI","_unused","V","_n$at","o","l","c","split","trim","shift","at","pop","splice","push","A","charAt","slice","fe","indexOf","de","href","title","other","state","inLink","type","raw","tokens","inlineTokens","Je","match","map","join","S","constructor","_defineProperty","options","space","rules","block","codeBlockStyle","lang","inline","depth","lexer","p","u","d","top","blockTokens","g","x","f","y","substring","ordered","start","loose","items","Z","repeat","trimStart","search","ee","te","ne","me","G","E","Y","task","checked","trimEnd","filter","some","pre","toLowerCase","_t$","header","align","rows","inRawBlock","emStrong","lastIndex","index","codespan","_this$rules$inline$_b","_this$rules$inline$_b2","inlineText","escaped","b","links","Object","create","inlineQueue","lex","lexInline","src","_this$options$extensi","_this$options$extensi2","call","startBlock","forEach","charCodeAt","console","error","Error","keys","includes","lastIndexOf","_this$options$extensi3","_this$options$extensi4","startInline","$","_ref","_match","_ref2","parser","parse","_ref3","_ref4","parseInline","listitem","_e$tokens$","checkbox","unshift","_ref5","_ref6","tablecell","tablerow","_ref7","strong","_ref8","em","_ref9","_ref0","_ref1","_ref10","image","_ref11","textRenderer","_","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17","_ref18","_ref19","T","_this$options$extensi5","renderers","_this$options$extensi6","L","_Class3","preprocess","postprocess","processAllTokens","provideLexer","provideParser","Set","B","setOptions","parseMarkdown","use","_this$defaults$extens","defaults","childTokens","flat","_len","Array","_key","name","_len2","_key2","apply","level","_len3","_key3","_len4","_key4","passThroughHooks","has","Promise","resolve","then","_len5","_key5","onError","prototype","toString","all","catch","message","reject","z","k","getDefaults","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","Dt","Zt","Gt","Ht","Nt","jt","Ft","Qt","Marked","marked"],"sources":["/Users/mohithneravati/Cyber quest/cyberquest/node_modules/marked/src/defaults.ts","/Users/mohithneravati/Cyber quest/cyberquest/node_modules/marked/src/rules.ts","/Users/mohithneravati/Cyber quest/cyberquest/node_modules/marked/src/helpers.ts","/Users/mohithneravati/Cyber quest/cyberquest/node_modules/marked/src/Tokenizer.ts","/Users/mohithneravati/Cyber quest/cyberquest/node_modules/marked/src/Lexer.ts","/Users/mohithneravati/Cyber quest/cyberquest/node_modules/marked/src/Renderer.ts","/Users/mohithneravati/Cyber quest/cyberquest/node_modules/marked/src/TextRenderer.ts","/Users/mohithneravati/Cyber quest/cyberquest/node_modules/marked/src/Parser.ts","/Users/mohithneravati/Cyber quest/cyberquest/node_modules/marked/src/Hooks.ts","/Users/mohithneravati/Cyber quest/cyberquest/node_modules/marked/src/Instance.ts","/Users/mohithneravati/Cyber quest/cyberquest/node_modules/marked/src/marked.ts"],"sourcesContent":["import type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Gets the original marked default options.\n */\nexport function _getDefaults(): MarkedOptions {\n  return {\n    async: false,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    hooks: null,\n    pedantic: false,\n    renderer: null,\n    silent: false,\n    tokenizer: null,\n    walkTokens: null,\n  };\n}\n\nexport let _defaults = _getDefaults();\n\nexport function changeDefaults(newDefaults: MarkedOptions) {\n  _defaults = newDefaults;\n}\n","const noopTest = { exec: () => null } as unknown as RegExp;\n\nfunction edit(regex: string | RegExp, opt = '') {\n  let source = typeof regex === 'string' ? regex : regex.source;\n  const obj = {\n    replace: (name: string | RegExp, val: string | RegExp) => {\n      let valSource = typeof val === 'string' ? val : val.source;\n      valSource = valSource.replace(other.caret, '$1');\n      source = source.replace(name, valSource);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(source, opt);\n    },\n  };\n  return obj;\n}\n\nexport const other = {\n  codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n  outputLinkReplace: /\\\\([\\[\\]])/g,\n  indentCodeCompensation: /^(\\s+)(?:```)/,\n  beginningSpace: /^\\s+/,\n  endingHash: /#$/,\n  startingSpaceChar: /^ /,\n  endingSpaceChar: / $/,\n  nonSpaceChar: /[^ ]/,\n  newLineCharGlobal: /\\n/g,\n  tabCharGlobal: /\\t/g,\n  multipleSpaceGlobal: /\\s+/g,\n  blankLine: /^[ \\t]*$/,\n  doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n  blockquoteStart: /^ {0,3}>/,\n  blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n  blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n  listReplaceTabs: /^\\t+/,\n  listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n  listIsTask: /^\\[[ xX]\\] /,\n  listReplaceTask: /^\\[[ xX]\\] +/,\n  anyLine: /\\n.*\\n/,\n  hrefBrackets: /^<(.*)>$/,\n  tableDelimiter: /[:|]/,\n  tableAlignChars: /^\\||\\| *$/g,\n  tableRowBlankLine: /\\n[ \\t]*$/,\n  tableAlignRight: /^ *-+: *$/,\n  tableAlignCenter: /^ *:-+: *$/,\n  tableAlignLeft: /^ *:-+ *$/,\n  startATag: /^<a /i,\n  endATag: /^<\\/a>/i,\n  startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n  endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n  startAngleBracket: /^</,\n  endAngleBracket: />$/,\n  pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n  unicodeAlphaNumeric: /[\\p{L}\\p{N}]/u,\n  escapeTest: /[&<>\"']/,\n  escapeReplace: /[&<>\"']/g,\n  escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n  escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n  unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n  caret: /(^|[^\\[])\\^/g,\n  percentDecode: /%25/g,\n  findPipe: /\\|/g,\n  splitPipe: / \\|/,\n  slashPipe: /\\\\\\|/g,\n  carriageReturn: /\\r\\n|\\r/g,\n  spaceLine: /^ +$/gm,\n  notSpaceStart: /^\\S*/,\n  endingNewline: /\\n$/,\n  listItemRegex: (bull: string) => new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`),\n  nextBulletRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`),\n  hrRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`),\n  fencesBeginRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`),\n  headingBeginRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`),\n  htmlBeginRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}<(?:[a-z].*>|!--)`, 'i'),\n};\n\n/**\n * Block-Level Grammar\n */\n\nconst newline = /^(?:[ \\t]*(?:\\n|$))+/;\nconst blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/;\nconst lheading = edit(lheadingCore)\n  .replace(/bull/g, bullet) // lists can interrupt\n  .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n  .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n  .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n  .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n  .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n  .replace(/\\|table/g, '') // table not in commonmark\n  .getRegex();\nconst lheadingGfm = edit(lheadingCore)\n  .replace(/bull/g, bullet) // lists can interrupt\n  .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n  .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n  .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n  .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n  .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n  .replace(/table/g, / {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/) // table can interrupt\n  .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/)\n  .replace('label', _blockLabel)\n  .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n  .getRegex();\n\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n  .replace(/bull/g, bullet)\n  .getRegex();\n\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n  + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit(\n  '^ {0,3}(?:' // optional indentation\n+ '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n+ '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n+ '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n+ '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n+ '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n+ '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (6)\n+ '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) open tag\n+ '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) closing tag\n+ ')', 'i')\n  .replace('comment', _comment)\n  .replace('tag', _tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nconst paragraph = edit(_paragraph)\n  .replace('hr', hr)\n  .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n  .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n  .replace('paragraph', paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nconst blockNormal = {\n  blockquote,\n  code: blockCode,\n  def,\n  fences,\n  heading,\n  hr,\n  html,\n  lheading,\n  list,\n  newline,\n  paragraph,\n  table: noopTest,\n  text: blockText,\n};\n\ntype BlockKeys = keyof typeof blockNormal;\n\n/**\n * GFM Block Grammar\n */\n\nconst gfmTable = edit(\n  '^ *([^\\\\n ].*)\\\\n' // Header\n+ ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n+ '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n  .replace('hr', hr)\n  .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', '(?: {4}| {0,3}\\t)[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nconst blockGfm: Record<BlockKeys, RegExp> = {\n  ...blockNormal,\n  lheading: lheadingGfm,\n  table: gfmTable,\n  paragraph: edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('table', gfmTable) // interrupt paragraphs with table\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex(),\n};\n\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nconst blockPedantic: Record<BlockKeys, RegExp> = {\n  ...blockNormal,\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', _comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', lheading)\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .replace('|tag', '')\n    .getRegex(),\n};\n\n/**\n * Inline-Level Grammar\n */\n\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = /[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpace = /[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpace = /[^\\s\\p{P}\\p{S}]/u;\nconst punctuation = edit(/^((?![*_])punctSpace)/, 'u')\n  .replace(/punctSpace/g, _punctuationOrSpace).getRegex();\n\n// GFM allows ~ inside strong and em for strikethrough\nconst _punctuationGfmStrongEm = /(?!~)[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpaceGfmStrongEm = /(?!~)[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpaceGfmStrongEm = /(?:[^\\s\\p{P}\\p{S}]|~)/u;\n\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\((?:\\\\.|[^\\\\\\(\\)]|\\((?:\\\\.|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<[^<>]*?>/g;\n\nconst emStrongLDelimCore = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/;\n\nconst emStrongLDelim = edit(emStrongLDelimCore, 'u')\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst emStrongLDelimGfm = edit(emStrongLDelimCore, 'u')\n  .replace(/punct/g, _punctuationGfmStrongEm)\n  .getRegex();\n\nconst emStrongRDelimAstCore =\n  '^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n+ '|[^*]+(?=[^*])' // Consume to delim\n+ '|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n+ '|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)' // (2) a***#, a*** can only be a Right Delimiter\n+ '|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)' // (3) #***a, ***a can only be Left Delimiter\n+ '|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)' // (4) ***# can only be Left Delimiter\n+ '|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)' // (5) #***# can be either Left or Right Delimiter\n+ '|notPunctSpace(\\\\*+)(?=notPunctSpace)'; // (6) a***a can be either Left or Right Delimiter\n\nconst emStrongRDelimAst = edit(emStrongRDelimAstCore, 'gu')\n  .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n  .replace(/punctSpace/g, _punctuationOrSpace)\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, 'gu')\n  .replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm)\n  .replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm)\n  .replace(/punct/g, _punctuationGfmStrongEm)\n  .getRegex();\n\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit(\n  '^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n+ '|[^_]+(?=[^_])' // Consume to delim\n+ '|(?!_)punct(_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n+ '|notPunctSpace(_+)(?!_)(?=punctSpace|$)' // (2) a___#, a___ can only be a Right Delimiter\n+ '|(?!_)punctSpace(_+)(?=notPunctSpace)' // (3) #___a, ___a can only be Left Delimiter\n+ '|[\\\\s](_+)(?!_)(?=punct)' // (4) ___# can only be Left Delimiter\n+ '|(?!_)punct(_+)(?!_)(?=punct)', 'gu') // (5) #___# can be either Left or Right Delimiter\n  .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n  .replace(/punctSpace/g, _punctuationOrSpace)\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst anyPunctuation = edit(/\\\\(punct)/, 'gu')\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n  .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n  .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n  .getRegex();\n\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit(\n  '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n  .replace('comment', _inlineComment)\n  .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\n\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:(?:[ \\t]*(?:\\n[ \\t]*)?)(title))?\\s*\\)/)\n  .replace('label', _inlineLabel)\n  .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^ \\t\\n\\x00-\\x1f]*/)\n  .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n  .getRegex();\n\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n  .replace('label', _inlineLabel)\n  .replace('ref', _blockLabel)\n  .getRegex();\n\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n  .replace('ref', _blockLabel)\n  .getRegex();\n\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n  .replace('reflink', reflink)\n  .replace('nolink', nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\nconst inlineNormal = {\n  _backpedal: noopTest, // only used for GFM url\n  anyPunctuation,\n  autolink,\n  blockSkip,\n  br,\n  code: inlineCode,\n  del: noopTest,\n  emStrongLDelim,\n  emStrongRDelimAst,\n  emStrongRDelimUnd,\n  escape,\n  link,\n  nolink,\n  punctuation,\n  reflink,\n  reflinkSearch,\n  tag,\n  text: inlineText,\n  url: noopTest,\n};\n\ntype InlineKeys = keyof typeof inlineNormal;\n\n/**\n * Pedantic Inline Grammar\n */\n\nconst inlinePedantic: Record<InlineKeys, RegExp> = {\n  ...inlineNormal,\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', _inlineLabel)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', _inlineLabel)\n    .getRegex(),\n};\n\n/**\n * GFM Inline Grammar\n */\n\nconst inlineGfm: Record<InlineKeys, RegExp> = {\n  ...inlineNormal,\n  emStrongRDelimAst: emStrongRDelimAstGfm,\n  emStrongLDelim: emStrongLDelimGfm,\n  url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n    .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n    .getRegex(),\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])((?:\\\\.|[^\\\\])*?(?:\\\\.|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/,\n};\n\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\nconst inlineBreaks: Record<InlineKeys, RegExp> = {\n  ...inlineGfm,\n  br: edit(br).replace('{2,}', '*').getRegex(),\n  text: edit(inlineGfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex(),\n};\n\n/**\n * exports\n */\n\nexport const block = {\n  normal: blockNormal,\n  gfm: blockGfm,\n  pedantic: blockPedantic,\n};\n\nexport const inline = {\n  normal: inlineNormal,\n  gfm: inlineGfm,\n  breaks: inlineBreaks,\n  pedantic: inlinePedantic,\n};\n\nexport interface Rules {\n  other: typeof other\n  block: Record<BlockKeys, RegExp>\n  inline: Record<InlineKeys, RegExp>\n}\n","import { other } from './rules.ts';\n\n/**\n * Helpers\n */\nconst escapeReplacements: { [index: string]: string } = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n};\nconst getEscapeReplacement = (ch: string) => escapeReplacements[ch];\n\nexport function escape(html: string, encode?: boolean) {\n  if (encode) {\n    if (other.escapeTest.test(html)) {\n      return html.replace(other.escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (other.escapeTestNoEncode.test(html)) {\n      return html.replace(other.escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nexport function unescape(html: string) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(other.unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nexport function cleanUrl(href: string) {\n  try {\n    href = encodeURI(href).replace(other.percentDecode, '%');\n  } catch {\n    return null;\n  }\n  return href;\n}\n\nexport function splitCells(tableRow: string, count?: number) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(other.findPipe, (match, offset, str) => {\n      let escaped = false;\n      let curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(other.splitPipe);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n  if (cells.length > 0 && !cells.at(-1)?.trim()) {\n    cells.pop();\n  }\n\n  if (count) {\n    if (cells.length > count) {\n      cells.splice(count);\n    } else {\n      while (cells.length < count) cells.push('');\n    }\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(other.slashPipe, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nexport function rtrim(str: string, c: string, invert?: boolean) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nexport function findClosingBracket(str: string, b: string) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n\n  let level = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  if (level > 0) {\n    return -2;\n  }\n\n  return -1;\n}\n","import { _defaults } from './defaults.ts';\nimport {\n  rtrim,\n  splitCells,\n  findClosingBracket,\n} from './helpers.ts';\nimport type { Rules } from './rules.ts';\nimport type { _Lexer } from './Lexer.ts';\nimport type { Links, Tokens, Token } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\nfunction outputLink(cap: string[], link: Pick<Tokens.Link, 'href' | 'title'>, raw: string, lexer: _Lexer, rules: Rules): Tokens.Link | Tokens.Image {\n  const href = link.href;\n  const title = link.title || null;\n  const text = cap[1].replace(rules.other.outputLinkReplace, '$1');\n\n  lexer.state.inLink = true;\n  const token: Tokens.Link | Tokens.Image = {\n    type: cap[0].charAt(0) === '!' ? 'image' : 'link',\n    raw,\n    href,\n    title,\n    text,\n    tokens: lexer.inlineTokens(text),\n  };\n  lexer.state.inLink = false;\n  return token;\n}\n\nfunction indentCodeCompensation(raw: string, text: string, rules: Rules) {\n  const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(rules.other.beginningSpace);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nexport class _Tokenizer {\n  options: MarkedOptions;\n  rules!: Rules; // set by the lexer\n  lexer!: _Lexer; // set by the lexer\n\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n  }\n\n  space(src: string): Tokens.Space | undefined {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0],\n      };\n    }\n  }\n\n  code(src: string): Tokens.Code | undefined {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(this.rules.other.codeRemoveIndent, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text,\n      };\n    }\n  }\n\n  fences(src: string): Tokens.Code | undefined {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '', this.rules);\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n        text,\n      };\n    }\n  }\n\n  heading(src: string): Tokens.Heading | undefined {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (this.rules.other.endingHash.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text),\n      };\n    }\n  }\n\n  hr(src: string): Tokens.Hr | undefined {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: rtrim(cap[0], '\\n'),\n      };\n    }\n  }\n\n  blockquote(src: string): Tokens.Blockquote | undefined {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      let lines = rtrim(cap[0], '\\n').split('\\n');\n      let raw = '';\n      let text = '';\n      const tokens: Token[] = [];\n\n      while (lines.length > 0) {\n        let inBlockquote = false;\n        const currentLines = [];\n\n        let i;\n        for (i = 0; i < lines.length; i++) {\n          // get lines up to a continuation\n          if (this.rules.other.blockquoteStart.test(lines[i])) {\n            currentLines.push(lines[i]);\n            inBlockquote = true;\n          } else if (!inBlockquote) {\n            currentLines.push(lines[i]);\n          } else {\n            break;\n          }\n        }\n        lines = lines.slice(i);\n\n        const currentRaw = currentLines.join('\\n');\n        const currentText = currentRaw\n          // precede setext continuation with 4 spaces so it isn't a setext\n          .replace(this.rules.other.blockquoteSetextReplace, '\\n    $1')\n          .replace(this.rules.other.blockquoteSetextReplace2, '');\n        raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n        text = text ? `${text}\\n${currentText}` : currentText;\n\n        // parse blockquote lines as top level tokens\n        // merge paragraphs if this is a continuation\n        const top = this.lexer.state.top;\n        this.lexer.state.top = true;\n        this.lexer.blockTokens(currentText, tokens, true);\n        this.lexer.state.top = top;\n\n        // if there is no continuation then we are done\n        if (lines.length === 0) {\n          break;\n        }\n\n        const lastToken = tokens.at(-1);\n\n        if (lastToken?.type === 'code') {\n          // blockquote continuation cannot be preceded by a code block\n          break;\n        } else if (lastToken?.type === 'blockquote') {\n          // include continuation in nested blockquote\n          const oldToken = lastToken as Tokens.Blockquote;\n          const newText = oldToken.raw + '\\n' + lines.join('\\n');\n          const newToken = this.blockquote(newText)!;\n          tokens[tokens.length - 1] = newToken;\n\n          raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n          text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n          break;\n        } else if (lastToken?.type === 'list') {\n          // include continuation in nested list\n          const oldToken = lastToken as Tokens.List;\n          const newText = oldToken.raw + '\\n' + lines.join('\\n');\n          const newToken = this.list(newText)!;\n          tokens[tokens.length - 1] = newToken;\n\n          raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n          text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n          lines = newText.substring(tokens.at(-1)!.raw.length).split('\\n');\n          continue;\n        }\n      }\n\n      return {\n        type: 'blockquote',\n        raw,\n        tokens,\n        text,\n      };\n    }\n  }\n\n  list(src: string): Tokens.List | undefined {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list: Tokens.List = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: [],\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = this.rules.other.listItemRegex(bull);\n      let endsWithBlankLine = false;\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        let endEarly = false;\n        let raw = '';\n        let itemContents = '';\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        let line = cap[2].split('\\n', 1)[0].replace(this.rules.other.listReplaceTabs, (t: string) => ' '.repeat(3 * t.length));\n        let nextLine = src.split('\\n', 1)[0];\n        let blankLine = !line.trim();\n\n        let indent = 0;\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimStart();\n        } else if (blankLine) {\n          indent = cap[1].length + 1;\n        } else {\n          indent = cap[2].search(this.rules.other.nonSpaceChar); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        if (blankLine && this.rules.other.blankLine.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = this.rules.other.nextBulletRegex(indent);\n          const hrRegex = this.rules.other.hrRegex(indent);\n          const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);\n          const headingBeginRegex = this.rules.other.headingBeginRegex(indent);\n          const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            const rawLine = src.split('\\n', 1)[0];\n            let nextLineWithoutTabs;\n            nextLine = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(this.rules.other.listReplaceNesting, '  ');\n              nextLineWithoutTabs = nextLine;\n            } else {\n              nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, '    ');\n            }\n\n            // End list item if found code fences\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new heading\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of html block\n            if (htmlBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(nextLine)) {\n              break;\n            }\n\n            if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) { // Dedent if possible\n              itemContents += '\\n' + nextLineWithoutTabs.slice(indent);\n            } else {\n              // not enough indentation\n              if (blankLine) {\n                break;\n              }\n\n              // paragraph continuation unless last line was a different block level element\n              if (line.replace(this.rules.other.tabCharGlobal, '    ').search(this.rules.other.nonSpaceChar) >= 4) { // indented code block\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n\n              itemContents += '\\n' + nextLine;\n            }\n\n            if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n            line = nextLineWithoutTabs.slice(indent);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (this.rules.other.doubleBlankLine.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        let istask: RegExpExecArray | null = null;\n        let ischecked: boolean | undefined;\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = this.rules.other.listIsTask.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(this.rules.other.listReplaceTask, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents,\n          tokens: [],\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      const lastItem = list.items.at(-1);\n      if (lastItem) {\n        lastItem.raw = lastItem.raw.trimEnd();\n        lastItem.text = lastItem.text.trimEnd();\n      } else {\n        // not a list since there were no items\n        return;\n      }\n      list.raw = list.raw.trimEnd();\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (let i = 0; i < list.items.length; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n\n        if (!list.loose) {\n          // Check if list should be loose\n          const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => this.rules.other.anyLine.test(t.raw));\n\n          list.loose = hasMultipleLineBreaks;\n        }\n      }\n\n      // Set all items to loose if list is loose\n      if (list.loose) {\n        for (let i = 0; i < list.items.length; i++) {\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src: string): Tokens.HTML | undefined {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token: Tokens.HTML = {\n        type: 'html',\n        block: true,\n        raw: cap[0],\n        pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n        text: cap[0],\n      };\n      return token;\n    }\n  }\n\n  def(src: string): Tokens.Def | undefined {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, ' ');\n      const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href,\n        title,\n      };\n    }\n  }\n\n  table(src: string): Tokens.Table | undefined {\n    const cap = this.rules.block.table.exec(src);\n    if (!cap) {\n      return;\n    }\n\n    if (!this.rules.other.tableDelimiter.test(cap[2])) {\n      // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n      return;\n    }\n\n    const headers = splitCells(cap[1]);\n    const aligns = cap[2].replace(this.rules.other.tableAlignChars, '').split('|');\n    const rows = cap[3]?.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, '').split('\\n') : [];\n\n    const item: Tokens.Table = {\n      type: 'table',\n      raw: cap[0],\n      header: [],\n      align: [],\n      rows: [],\n    };\n\n    if (headers.length !== aligns.length) {\n      // header and align columns must be equal, rows can be different.\n      return;\n    }\n\n    for (const align of aligns) {\n      if (this.rules.other.tableAlignRight.test(align)) {\n        item.align.push('right');\n      } else if (this.rules.other.tableAlignCenter.test(align)) {\n        item.align.push('center');\n      } else if (this.rules.other.tableAlignLeft.test(align)) {\n        item.align.push('left');\n      } else {\n        item.align.push(null);\n      }\n    }\n\n    for (let i = 0; i < headers.length; i++) {\n      item.header.push({\n        text: headers[i],\n        tokens: this.lexer.inline(headers[i]),\n        header: true,\n        align: item.align[i],\n      });\n    }\n\n    for (const row of rows) {\n      item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n        return {\n          text: cell,\n          tokens: this.lexer.inline(cell),\n          header: false,\n          align: item.align[i],\n        };\n      }));\n    }\n\n    return item;\n  }\n\n  lheading(src: string): Tokens.Heading | undefined {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1]),\n      };\n    }\n  }\n\n  paragraph(src: string): Tokens.Paragraph | undefined {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n        ? cap[1].slice(0, -1)\n        : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text),\n      };\n    }\n  }\n\n  text(src: string): Tokens.Text | undefined {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0]),\n      };\n    }\n  }\n\n  escape(src: string): Tokens.Escape | undefined {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: cap[1],\n      };\n    }\n  }\n\n  tag(src: string): Tokens.Tag | undefined {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        block: false,\n        text: cap[0],\n      };\n    }\n  }\n\n  link(src: string): Tokens.Link | Tokens.Image | undefined {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex === -2) {\n          // more open parens than closed\n          return;\n        }\n\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = this.rules.other.pedanticHrefTitle.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (this.rules.other.startAngleBracket.test(href)) {\n        if (this.options.pedantic && !(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n        title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title,\n      }, cap[0], this.lexer, this.rules);\n    }\n  }\n\n  reflink(src: string, links: Links): Tokens.Link | Tokens.Image | Tokens.Text | undefined {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n      || (cap = this.rules.inline.nolink.exec(src))) {\n      const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, ' ');\n      const link = links[linkString.toLowerCase()];\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text,\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer, this.rules);\n    }\n  }\n\n  emStrong(src: string, maskedSrc: string, prevChar = ''): Tokens.Em | Tokens.Strong | undefined {\n    let match = this.rules.inline.emStrongLDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n      // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n      const lLength = [...match[0]].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = [...rDelim].length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n        // char length can be >1 for unicode characters;\n        const lastCharLength = [...match[0]][0].length;\n        const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text),\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text),\n        };\n      }\n    }\n  }\n\n  codespan(src: string): Tokens.Codespan | undefined {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(this.rules.other.newLineCharGlobal, ' ');\n      const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);\n      const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text,\n      };\n    }\n  }\n\n  br(src: string): Tokens.Br | undefined {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0],\n      };\n    }\n  }\n\n  del(src: string): Tokens.Del | undefined {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2]),\n      };\n    }\n  }\n\n  autolink(src: string): Tokens.Link | undefined {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = cap[1];\n        href = 'mailto:' + text;\n      } else {\n        text = cap[1];\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text,\n          },\n        ],\n      };\n    }\n  }\n\n  url(src: string): Tokens.Link | undefined {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = cap[0];\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n        } while (prevCapZero !== cap[0]);\n        text = cap[0];\n        if (cap[1] === 'www.') {\n          href = 'http://' + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text,\n          },\n        ],\n      };\n    }\n  }\n\n  inlineText(src: string): Tokens.Text | undefined {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      const escaped = this.lexer.state.inRawBlock;\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        escaped,\n      };\n    }\n  }\n}\n","import { _Tokenizer } from './Tokenizer.ts';\nimport { _defaults } from './defaults.ts';\nimport { other, block, inline } from './rules.ts';\nimport type { Token, TokensList, Tokens } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Block Lexer\n */\nexport class _Lexer {\n  tokens: TokensList;\n  options: MarkedOptions;\n  state: {\n    inLink: boolean;\n    inRawBlock: boolean;\n    top: boolean;\n  };\n\n  private tokenizer: _Tokenizer;\n  private inlineQueue: { src: string, tokens: Token[] }[];\n\n  constructor(options?: MarkedOptions) {\n    // TokenList cannot be created in one go\n    this.tokens = [] as unknown as TokensList;\n    this.tokens.links = Object.create(null);\n    this.options = options || _defaults;\n    this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true,\n    };\n\n    const rules = {\n      other,\n      block: block.normal,\n      inline: inline.normal,\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline,\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src: string, options?: MarkedOptions) {\n    const lexer = new _Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src: string, options?: MarkedOptions) {\n    const lexer = new _Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src: string) {\n    src = src.replace(other.carriageReturn, '\\n');\n\n    this.blockTokens(src, this.tokens);\n\n    for (let i = 0; i < this.inlineQueue.length; i++) {\n      const next = this.inlineQueue[i];\n      this.inlineTokens(next.src, next.tokens);\n    }\n    this.inlineQueue = [];\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src: string, tokens?: Token[], lastParagraphClipped?: boolean): Token[];\n  blockTokens(src: string, tokens?: TokensList, lastParagraphClipped?: boolean): TokensList;\n  blockTokens(src: string, tokens: Token[] = [], lastParagraphClipped = false) {\n    if (this.options.pedantic) {\n      src = src.replace(other.tabCharGlobal, '    ').replace(other.spaceLine, '');\n    }\n\n    while (src) {\n      let token: Tokens.Generic | undefined;\n\n      if (this.options.extensions?.block?.some((extTokenizer) => {\n        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (token.raw.length === 1 && lastToken !== undefined) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unnecessary paragraph tags\n          lastToken.raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title,\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      let cutSrc = src;\n      if (this.options.extensions?.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        const lastToken = tokens.at(-1);\n        if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = cutSrc.length !== src.length;\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src: string, tokens: Token[] = []) {\n    this.inlineQueue.push({ src, tokens });\n    return tokens;\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src: string, tokens: Token[] = []): Token[] {\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match: RegExpExecArray | null = null;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index)\n              + '[' + 'a'.repeat(match[0].length - 2) + ']'\n              + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n\n    // Mask out escaped characters\n    while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n    }\n\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    let keepPrevChar = false;\n    let prevChar = '';\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      let token: Tokens.Generic | undefined;\n\n      // extensions\n      if (this.options.extensions?.inline?.some((extTokenizer) => {\n        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (token.type === 'text' && lastToken?.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      let cutSrc = src;\n      if (this.options.extensions?.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n","import { _defaults } from './defaults.ts';\nimport {\n  cleanUrl,\n  escape,\n} from './helpers.ts';\nimport { other } from './rules.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\nimport type { Tokens } from './Tokens.ts';\nimport type { _Parser } from './Parser.ts';\n\n/**\n * Renderer\n */\nexport class _Renderer {\n  options: MarkedOptions;\n  parser!: _Parser; // set by the parser\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n  }\n\n  space(token: Tokens.Space): string {\n    return '';\n  }\n\n  code({ text, lang, escaped }: Tokens.Code): string {\n    const langString = (lang || '').match(other.notSpaceStart)?.[0];\n\n    const code = text.replace(other.endingNewline, '') + '\\n';\n\n    if (!langString) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"language-'\n      + escape(langString)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  }\n\n  blockquote({ tokens }: Tokens.Blockquote): string {\n    const body = this.parser.parse(tokens);\n    return `<blockquote>\\n${body}</blockquote>\\n`;\n  }\n\n  html({ text }: Tokens.HTML | Tokens.Tag) : string {\n    return text;\n  }\n\n  heading({ tokens, depth }: Tokens.Heading): string {\n    return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n  }\n\n  hr(token: Tokens.Hr): string {\n    return '<hr>\\n';\n  }\n\n  list(token: Tokens.List): string {\n    const ordered = token.ordered;\n    const start = token.start;\n\n    let body = '';\n    for (let j = 0; j < token.items.length; j++) {\n      const item = token.items[j];\n      body += this.listitem(item);\n    }\n\n    const type = ordered ? 'ol' : 'ul';\n    const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  listitem(item: Tokens.ListItem): string {\n    let itemBody = '';\n    if (item.task) {\n      const checkbox = this.checkbox({ checked: !!item.checked });\n      if (item.loose) {\n        if (item.tokens[0]?.type === 'paragraph') {\n          item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n          if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n            item.tokens[0].tokens[0].text = checkbox + ' ' + escape(item.tokens[0].tokens[0].text);\n            item.tokens[0].tokens[0].escaped = true;\n          }\n        } else {\n          item.tokens.unshift({\n            type: 'text',\n            raw: checkbox + ' ',\n            text: checkbox + ' ',\n            escaped: true,\n          });\n        }\n      } else {\n        itemBody += checkbox + ' ';\n      }\n    }\n\n    itemBody += this.parser.parse(item.tokens, !!item.loose);\n\n    return `<li>${itemBody}</li>\\n`;\n  }\n\n  checkbox({ checked }: Tokens.Checkbox): string {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\">';\n  }\n\n  paragraph({ tokens }: Tokens.Paragraph): string {\n    return `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n  }\n\n  table(token: Tokens.Table): string {\n    let header = '';\n\n    // header\n    let cell = '';\n    for (let j = 0; j < token.header.length; j++) {\n      cell += this.tablecell(token.header[j]);\n    }\n    header += this.tablerow({ text: cell });\n\n    let body = '';\n    for (let j = 0; j < token.rows.length; j++) {\n      const row = token.rows[j];\n\n      cell = '';\n      for (let k = 0; k < row.length; k++) {\n        cell += this.tablecell(row[k]);\n      }\n\n      body += this.tablerow({ text: cell });\n    }\n    if (body) body = `<tbody>${body}</tbody>`;\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  }\n\n  tablerow({ text }: Tokens.TableRow): string {\n    return `<tr>\\n${text}</tr>\\n`;\n  }\n\n  tablecell(token: Tokens.TableCell): string {\n    const content = this.parser.parseInline(token.tokens);\n    const type = token.header ? 'th' : 'td';\n    const tag = token.align\n      ? `<${type} align=\"${token.align}\">`\n      : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n\n  /**\n   * span level renderer\n   */\n  strong({ tokens }: Tokens.Strong): string {\n    return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n  }\n\n  em({ tokens }: Tokens.Em): string {\n    return `<em>${this.parser.parseInline(tokens)}</em>`;\n  }\n\n  codespan({ text }: Tokens.Codespan): string {\n    return `<code>${escape(text, true)}</code>`;\n  }\n\n  br(token: Tokens.Br): string {\n    return '<br>';\n  }\n\n  del({ tokens }: Tokens.Del): string {\n    return `<del>${this.parser.parseInline(tokens)}</del>`;\n  }\n\n  link({ href, title, tokens }: Tokens.Link): string {\n    const text = this.parser.parseInline(tokens);\n    const cleanHref = cleanUrl(href);\n    if (cleanHref === null) {\n      return text;\n    }\n    href = cleanHref;\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + (escape(title)) + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  image({ href, title, text, tokens }: Tokens.Image): string {\n    if (tokens) {\n      text = this.parser.parseInline(tokens, this.parser.textRenderer);\n    }\n    const cleanHref = cleanUrl(href);\n    if (cleanHref === null) {\n      return escape(text);\n    }\n    href = cleanHref;\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${escape(title)}\"`;\n    }\n    out += '>';\n    return out;\n  }\n\n  text(token: Tokens.Text | Tokens.Escape) : string {\n    return 'tokens' in token && token.tokens\n      ? this.parser.parseInline(token.tokens)\n      : ('escaped' in token && token.escaped ? token.text : escape(token.text));\n  }\n}\n","import type { Tokens } from './Tokens.ts';\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nexport class _TextRenderer {\n  // no need for block level renderers\n  strong({ text }: Tokens.Strong) {\n    return text;\n  }\n\n  em({ text }: Tokens.Em) {\n    return text;\n  }\n\n  codespan({ text }: Tokens.Codespan) {\n    return text;\n  }\n\n  del({ text }: Tokens.Del) {\n    return text;\n  }\n\n  html({ text }: Tokens.HTML | Tokens.Tag) {\n    return text;\n  }\n\n  text({ text }: Tokens.Text | Tokens.Escape | Tokens.Tag) {\n    return text;\n  }\n\n  link({ text }: Tokens.Link) {\n    return '' + text;\n  }\n\n  image({ text }: Tokens.Image) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n}\n","import { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _defaults } from './defaults.ts';\nimport type { MarkedToken, Token, Tokens } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Parsing & Compiling\n */\nexport class _Parser {\n  options: MarkedOptions;\n  renderer: _Renderer;\n  textRenderer: _TextRenderer;\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n    this.options.renderer = this.options.renderer || new _Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.renderer.parser = this;\n    this.textRenderer = new _TextRenderer();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens: Token[], options?: MarkedOptions) {\n    const parser = new _Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens: Token[], options?: MarkedOptions) {\n    const parser = new _Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens: Token[], top = true): string {\n    let out = '';\n\n    for (let i = 0; i < tokens.length; i++) {\n      const anyToken = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions?.renderers?.[anyToken.type]) {\n        const genericToken = anyToken as Tokens.Generic;\n        const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      const token = anyToken as MarkedToken;\n\n      switch (token.type) {\n        case 'space': {\n          out += this.renderer.space(token);\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr(token);\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(token);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token);\n          continue;\n        }\n        case 'table': {\n          out += this.renderer.table(token);\n          continue;\n        }\n        case 'blockquote': {\n          out += this.renderer.blockquote(token);\n          continue;\n        }\n        case 'list': {\n          out += this.renderer.list(token);\n          continue;\n        }\n        case 'html': {\n          out += this.renderer.html(token);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(token);\n          continue;\n        }\n        case 'text': {\n          let textToken = token;\n          let body = this.renderer.text(textToken);\n          while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n            textToken = tokens[++i] as Tokens.Text;\n            body += '\\n' + this.renderer.text(textToken);\n          }\n          if (top) {\n            out += this.renderer.paragraph({\n              type: 'paragraph',\n              raw: body,\n              text: body,\n              tokens: [{ type: 'text', raw: body, text: body, escaped: true }],\n            });\n          } else {\n            out += body;\n          }\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return '';\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens: Token[], renderer: _Renderer | _TextRenderer = this.renderer): string {\n    let out = '';\n\n    for (let i = 0; i < tokens.length; i++) {\n      const anyToken = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions?.renderers?.[anyToken.type]) {\n        const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      const token = anyToken as MarkedToken;\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token);\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(token);\n          break;\n        }\n        case 'em': {\n          out += renderer.em(token);\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token);\n          break;\n        }\n        case 'br': {\n          out += renderer.br(token);\n          break;\n        }\n        case 'del': {\n          out += renderer.del(token);\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return '';\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n}\n","import { _defaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, TokensList } from './Tokens.ts';\n\nexport class _Hooks {\n  options: MarkedOptions;\n  block?: boolean;\n\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n  }\n\n  static passThroughHooks = new Set([\n    'preprocess',\n    'postprocess',\n    'processAllTokens',\n  ]);\n\n  /**\n   * Process markdown before marked\n   */\n  preprocess(markdown: string) {\n    return markdown;\n  }\n\n  /**\n   * Process HTML after marked is finished\n   */\n  postprocess(html: string) {\n    return html;\n  }\n\n  /**\n   * Process all tokens before walk tokens\n   */\n  processAllTokens(tokens: Token[] | TokensList) {\n    return tokens;\n  }\n\n  /**\n   * Provide function to tokenize markdown\n   */\n  provideLexer() {\n    return this.block ? _Lexer.lex : _Lexer.lexInline;\n  }\n\n  /**\n   * Provide function to parse tokens\n   */\n  provideParser() {\n    return this.block ? _Parser.parse : _Parser.parseInline;\n  }\n}\n","import { _getDefaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { escape } from './helpers.ts';\nimport type { MarkedExtension, MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, Tokens, TokensList } from './Tokens.ts';\n\nexport type MaybePromise = void | Promise<void>;\n\ntype UnknownFunction = (...args: unknown[]) => unknown;\ntype GenericRendererFunction = (...args: unknown[]) => string | false;\n\nexport class Marked {\n  defaults = _getDefaults();\n  options = this.setOptions;\n\n  parse = this.parseMarkdown(true);\n  parseInline = this.parseMarkdown(false);\n\n  Parser = _Parser;\n  Renderer = _Renderer;\n  TextRenderer = _TextRenderer;\n  Lexer = _Lexer;\n  Tokenizer = _Tokenizer;\n  Hooks = _Hooks;\n\n  constructor(...args: MarkedExtension[]) {\n    this.use(...args);\n  }\n\n  /**\n   * Run callback for every token\n   */\n  walkTokens(tokens: Token[] | TokensList, callback: (token: Token) => MaybePromise | MaybePromise[]) {\n    let values: MaybePromise[] = [];\n    for (const token of tokens) {\n      values = values.concat(callback.call(this, token));\n      switch (token.type) {\n        case 'table': {\n          const tableToken = token as Tokens.Table;\n          for (const cell of tableToken.header) {\n            values = values.concat(this.walkTokens(cell.tokens, callback));\n          }\n          for (const row of tableToken.rows) {\n            for (const cell of row) {\n              values = values.concat(this.walkTokens(cell.tokens, callback));\n            }\n          }\n          break;\n        }\n        case 'list': {\n          const listToken = token as Tokens.List;\n          values = values.concat(this.walkTokens(listToken.items, callback));\n          break;\n        }\n        default: {\n          const genericToken = token as Tokens.Generic;\n          if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n            this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n              const tokens = genericToken[childTokens].flat(Infinity) as Token[] | TokensList;\n              values = values.concat(this.walkTokens(tokens, callback));\n            });\n          } else if (genericToken.tokens) {\n            values = values.concat(this.walkTokens(genericToken.tokens, callback));\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  use(...args: MarkedExtension[]) {\n    const extensions: MarkedOptions['extensions'] = this.defaults.extensions || { renderers: {}, childTokens: {} };\n\n    args.forEach((pack) => {\n      // copy options to new object\n      const opts = { ...pack } as MarkedOptions;\n\n      // set async to true if it was set to true before\n      opts.async = this.defaults.async || opts.async || false;\n\n      // ==-- Parse \"addon\" extensions --== //\n      if (pack.extensions) {\n        pack.extensions.forEach((ext) => {\n          if (!ext.name) {\n            throw new Error('extension name required');\n          }\n          if ('renderer' in ext) { // Renderer extensions\n            const prevRenderer = extensions.renderers[ext.name];\n            if (prevRenderer) {\n              // Replace extension with func to run new extension but fall back if false\n              extensions.renderers[ext.name] = function(...args) {\n                let ret = ext.renderer.apply(this, args);\n                if (ret === false) {\n                  ret = prevRenderer.apply(this, args);\n                }\n                return ret;\n              };\n            } else {\n              extensions.renderers[ext.name] = ext.renderer;\n            }\n          }\n          if ('tokenizer' in ext) { // Tokenizer Extensions\n            if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n              throw new Error(\"extension level must be 'block' or 'inline'\");\n            }\n            const extLevel = extensions[ext.level];\n            if (extLevel) {\n              extLevel.unshift(ext.tokenizer);\n            } else {\n              extensions[ext.level] = [ext.tokenizer];\n            }\n            if (ext.start) { // Function to check for start of token\n              if (ext.level === 'block') {\n                if (extensions.startBlock) {\n                  extensions.startBlock.push(ext.start);\n                } else {\n                  extensions.startBlock = [ext.start];\n                }\n              } else if (ext.level === 'inline') {\n                if (extensions.startInline) {\n                  extensions.startInline.push(ext.start);\n                } else {\n                  extensions.startInline = [ext.start];\n                }\n              }\n            }\n          }\n          if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n            extensions.childTokens[ext.name] = ext.childTokens;\n          }\n        });\n        opts.extensions = extensions;\n      }\n\n      // ==-- Parse \"overwrite\" extensions --== //\n      if (pack.renderer) {\n        const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n        for (const prop in pack.renderer) {\n          if (!(prop in renderer)) {\n            throw new Error(`renderer '${prop}' does not exist`);\n          }\n          if (['options', 'parser'].includes(prop)) {\n            // ignore options property\n            continue;\n          }\n          const rendererProp = prop as Exclude<keyof _Renderer, 'options' | 'parser'>;\n          const rendererFunc = pack.renderer[rendererProp] as GenericRendererFunction;\n          const prevRenderer = renderer[rendererProp] as GenericRendererFunction;\n          // Replace renderer with func to run extension, but fall back if false\n          renderer[rendererProp] = (...args: unknown[]) => {\n            let ret = rendererFunc.apply(renderer, args);\n            if (ret === false) {\n              ret = prevRenderer.apply(renderer, args);\n            }\n            return ret || '';\n          };\n        }\n        opts.renderer = renderer;\n      }\n      if (pack.tokenizer) {\n        const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n        for (const prop in pack.tokenizer) {\n          if (!(prop in tokenizer)) {\n            throw new Error(`tokenizer '${prop}' does not exist`);\n          }\n          if (['options', 'rules', 'lexer'].includes(prop)) {\n            // ignore options, rules, and lexer properties\n            continue;\n          }\n          const tokenizerProp = prop as Exclude<keyof _Tokenizer, 'options' | 'rules' | 'lexer'>;\n          const tokenizerFunc = pack.tokenizer[tokenizerProp] as UnknownFunction;\n          const prevTokenizer = tokenizer[tokenizerProp] as UnknownFunction;\n          // Replace tokenizer with func to run extension, but fall back if false\n          // @ts-expect-error cannot type tokenizer function dynamically\n          tokenizer[tokenizerProp] = (...args: unknown[]) => {\n            let ret = tokenizerFunc.apply(tokenizer, args);\n            if (ret === false) {\n              ret = prevTokenizer.apply(tokenizer, args);\n            }\n            return ret;\n          };\n        }\n        opts.tokenizer = tokenizer;\n      }\n\n      // ==-- Parse Hooks extensions --== //\n      if (pack.hooks) {\n        const hooks = this.defaults.hooks || new _Hooks();\n        for (const prop in pack.hooks) {\n          if (!(prop in hooks)) {\n            throw new Error(`hook '${prop}' does not exist`);\n          }\n          if (['options', 'block'].includes(prop)) {\n            // ignore options and block properties\n            continue;\n          }\n          const hooksProp = prop as Exclude<keyof _Hooks, 'options' | 'block'>;\n          const hooksFunc = pack.hooks[hooksProp] as UnknownFunction;\n          const prevHook = hooks[hooksProp] as UnknownFunction;\n          if (_Hooks.passThroughHooks.has(prop)) {\n            // @ts-expect-error cannot type hook function dynamically\n            hooks[hooksProp] = (arg: unknown) => {\n              if (this.defaults.async) {\n                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                  return prevHook.call(hooks, ret);\n                });\n              }\n\n              const ret = hooksFunc.call(hooks, arg);\n              return prevHook.call(hooks, ret);\n            };\n          } else {\n            // @ts-expect-error cannot type hook function dynamically\n            hooks[hooksProp] = (...args: unknown[]) => {\n              let ret = hooksFunc.apply(hooks, args);\n              if (ret === false) {\n                ret = prevHook.apply(hooks, args);\n              }\n              return ret;\n            };\n          }\n        }\n        opts.hooks = hooks;\n      }\n\n      // ==-- Parse WalkTokens extensions --== //\n      if (pack.walkTokens) {\n        const walkTokens = this.defaults.walkTokens;\n        const packWalktokens = pack.walkTokens;\n        opts.walkTokens = function(token) {\n          let values: MaybePromise[] = [];\n          values.push(packWalktokens.call(this, token));\n          if (walkTokens) {\n            values = values.concat(walkTokens.call(this, token));\n          }\n          return values;\n        };\n      }\n\n      this.defaults = { ...this.defaults, ...opts };\n    });\n\n    return this;\n  }\n\n  setOptions(opt: MarkedOptions) {\n    this.defaults = { ...this.defaults, ...opt };\n    return this;\n  }\n\n  lexer(src: string, options?: MarkedOptions) {\n    return _Lexer.lex(src, options ?? this.defaults);\n  }\n\n  parser(tokens: Token[], options?: MarkedOptions) {\n    return _Parser.parse(tokens, options ?? this.defaults);\n  }\n\n  private parseMarkdown(blockType: boolean) {\n    type overloadedParse = {\n      (src: string, options: MarkedOptions & { async: true }): Promise<string>;\n      (src: string, options: MarkedOptions & { async: false }): string;\n      (src: string, options?: MarkedOptions | null): string | Promise<string>;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const parse: overloadedParse = (src: string, options?: MarkedOptions | null): any => {\n      const origOpt = { ...options };\n      const opt = { ...this.defaults, ...origOpt };\n\n      const throwError = this.onError(!!opt.silent, !!opt.async);\n\n      // throw error if an extension set async to true but parse was called with async: false\n      if (this.defaults.async === true && origOpt.async === false) {\n        return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n      }\n\n      // throw error in case of non string input\n      if (typeof src === 'undefined' || src === null) {\n        return throwError(new Error('marked(): input parameter is undefined or null'));\n      }\n      if (typeof src !== 'string') {\n        return throwError(new Error('marked(): input parameter is of type '\n          + Object.prototype.toString.call(src) + ', string expected'));\n      }\n\n      if (opt.hooks) {\n        opt.hooks.options = opt;\n        opt.hooks.block = blockType;\n      }\n\n      const lexer = opt.hooks ? opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);\n      const parser = opt.hooks ? opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);\n\n      if (opt.async) {\n        return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n          .then(src => lexer(src, opt))\n          .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n          .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n          .then(tokens => parser(tokens, opt))\n          .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n          .catch(throwError);\n      }\n\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src) as string;\n        }\n        let tokens = lexer(src, opt);\n        if (opt.hooks) {\n          tokens = opt.hooks.processAllTokens(tokens);\n        }\n        if (opt.walkTokens) {\n          this.walkTokens(tokens, opt.walkTokens);\n        }\n        let html = parser(tokens, opt);\n        if (opt.hooks) {\n          html = opt.hooks.postprocess(html) as string;\n        }\n        return html;\n      } catch(e) {\n        return throwError(e as Error);\n      }\n    };\n\n    return parse;\n  }\n\n  private onError(silent: boolean, async: boolean) {\n    return (e: Error): string | Promise<string> => {\n      e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n      if (silent) {\n        const msg = '<p>An error occurred:</p><pre>'\n          + escape(e.message + '', true)\n          + '</pre>';\n        if (async) {\n          return Promise.resolve(msg);\n        }\n        return msg;\n      }\n\n      if (async) {\n        return Promise.reject(e);\n      }\n      throw e;\n    };\n  }\n}\n","import { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { Marked } from './Instance.ts';\nimport {\n  _getDefaults,\n  changeDefaults,\n  _defaults,\n} from './defaults.ts';\nimport type { MarkedExtension, MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, TokensList } from './Tokens.ts';\nimport type { MaybePromise } from './Instance.ts';\n\nconst markedInstance = new Marked();\n\n/**\n * Compiles markdown to HTML asynchronously.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options, having async: true\n * @return Promise of string of compiled HTML\n */\nexport function marked(src: string, options: MarkedOptions & { async: true }): Promise<string>;\n\n/**\n * Compiles markdown to HTML.\n *\n * @param src String of markdown source to be compiled\n * @param options Optional hash of options\n * @return String of compiled HTML. Will be a Promise of string if async is set to true by any extensions.\n */\nexport function marked(src: string, options: MarkedOptions & { async: false }): string;\nexport function marked(src: string, options: MarkedOptions & { async: true }): Promise<string>;\nexport function marked(src: string, options?: MarkedOptions | null): string | Promise<string>;\nexport function marked(src: string, opt?: MarkedOptions | null): string | Promise<string> {\n  return markedInstance.parse(src, opt);\n}\n\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\nmarked.setOptions = function(options: MarkedOptions) {\n  markedInstance.setOptions(options);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\n\nmarked.defaults = _defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args: MarkedExtension[]) {\n  markedInstance.use(...args);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens: Token[] | TokensList, callback: (token: Token) => MaybePromise | MaybePromise[]) {\n  return markedInstance.walkTokens(tokens, callback);\n};\n\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\n\nexport const options = marked.options;\nexport const setOptions = marked.setOptions;\nexport const use = marked.use;\nexport const walkTokens = marked.walkTokens;\nexport const parseInline = marked.parseInline;\nexport const parse = marked;\nexport const parser = _Parser.parse;\nexport const lexer = _Lexer.lex;\nexport { _defaults as defaults, _getDefaults as getDefaults } from './defaults.ts';\nexport { _Lexer as Lexer } from './Lexer.ts';\nexport { _Parser as Parser } from './Parser.ts';\nexport { _Tokenizer as Tokenizer } from './Tokenizer.ts';\nexport { _Renderer as Renderer } from './Renderer.ts';\nexport { _TextRenderer as TextRenderer } from './TextRenderer.ts';\nexport { _Hooks as Hooks } from './Hooks.ts';\nexport { Marked } from './Instance.ts';\nexport type * from './MarkedOptions.ts';\nexport type * from './Tokens.ts';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}